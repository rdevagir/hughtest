<apex:page controller="GRAXBackupCtrl" showHeader="false" applyHtmlTag="false" applyBodyTag="false" language="en_Us">
    <apex:includeScript value="{!URLFOR($Resource.grax, '/jquery.sldsPillsCombobox.js')}"/>
    
    <style>
        #archive_help {
            position: absolute;
            top: -6.25rem;
            left: 2rem;
        }

        .progress_additional_information {
            position: absolute !important;
            top: 20px !important;
            left: 50px !important;
        }
        
        #progress_help,
        #spname_help,
        #spisactive_help,
        #timezone_help,
        #timerange_help,
        #frequency_help,
        #lastModifyDate_help,
        #report_help,
        #extraMails_help,
        .progress_additional_information {
            position: fixed;
            margin-top: 1rem;
        }

        #spname_help,
        #spisactive_help,
        #timezone_help,
        #timerange_help,
        #frequency_help,
        #lastModifyDate_help,
        #report_help,
        #extraMails_help {
            z-index: 9999;
        }

        .help_button_container {
            align-self: end;
            margin: 0.5rem;
        }

        #incrementalBackup_help {
            position: absolute;
            top: -9.5rem;
            left: 6.7rem;
        }

        #rollingDate_help {
            position: absolute;
            top: -4rem;
            left: 3.8rem;
        }

        #scheduledProcessModal[data-multi="true"] #incrementalBackup_help {
            top: -5rem;
        }

        .slds-scope .slds-input-has-icon.slds-form-element__date .slds-input__icon {
            pointer-events: all;
        }

        .slds-scope .slds-input-has-icon.slds-form-element__date .slds-input__icon:hover {
            fill: #005fb2;
        }

        #scheduledProcessModal[data-multi="true"] [data-multi="false"],
        #scheduledProcessModal[data-multi="false"] [data-multi="true"] {
            display: none;
        }

        #scheduledProcessModal[data-multi="false"] [data-multi="false"] {
            display: inherit!important;
        }

        #scheduledProcessModal[data-multi="false"] [data-multi="false"].slds-hide {
            display: none !important;
        }

        #scheduledProcessModal.isReadOnly .slds-section,
        #scheduledProcessModal.isReadOnly [data-read-only-editable="false"] {
            pointer-events: none;
            opacity: 0.5;
        }

        #scheduledProcessModal span[data-read-only="true"],
        #sheduledProcessModal.isReadOnly span[data-read-only="false"] {
            display: none;
        }

        #scheduledProcessModal.isReadOnly span[data-read-only="true"] {
            display: inline-block;
        }

        #scheduledProcessModal.isReadOnly [data-read-only="false"] {
            display: none;
        }

        #scheduledProcessModal.isReadOnly [data-read-only-editable="true"],
        #scheduledProcessModal.isReadOnly .slds-section .slds-tree .slds-button {
            pointer-events: all;
            opacity: 1;
        }

        #scheduledProcessModal.isReadOnly #isArchiveToggle {
            display: none!important;
        }

        #scheduledProcessModal.isReadOnly .slds-th__action_form {
            pointer-events: none!important;
        }

        #ObjectsSection {
            pointer-events: all!important;
        }

        #ObjectsSection > div.slds-scrollable_y,
        #ParentsSection > div.slds-section__content > div.slds-scrollable_y {
            max-height: 45vh;
        }

        #tab-archiving_scheduledprocesses {
            margin-bottom: 6rem;
        }

        .slds-hide {
            display: none!important;
        }

        #listbox-users .slds-listbox.slds-listbox_vertical:empty::before {
            content: 'Loading...';
            display: block;
            text-align: center;
        }

        .scheduledProcessesContainer .slds-th__action {
            margin: -0.25rem;
            cursor: pointer;
        }
    </style>
    
    <script>
        window.addReportListOptions = function() {};
        window.updateSaveState = function() {};


        var paginatorFirstIcon = "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#left')}";
        var paginatorPrevIcon = "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#chevronleft')}";
        var paginatorNextIcon = "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#chevronright')}";
        var paginatorLastIcon = "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#right')}";

        function renderPaginator(paginatorPanelId, totalRecords, pageLimit, currentIndex) {
            var $paginator = $('#' + paginatorPanelId);

            var totalPages = Math.ceil(totalRecords / pageLimit);

            if (totalPages > 1) {
                var $pages = $('<div class="slds-button-group" role="group" />');

                var currentPage = currentIndex + 1;

                var startPage, endPage;
                if (totalPages <= 10) {
                    // less than 10 total pages so show all
                    startPage = 1;
                    endPage = totalPages;
                } else {
                    // more than 10 total pages so calculate start and end pages
                    if (currentPage <= 6) {
                        startPage = 1;
                        endPage = 10;
                    }else{
                        startPage = currentPage - 5;
                        endPage = currentPage + 4;
                    }
                }

                var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function(i) {
                    return startPage + i;
                });

                var isFirstPage = currentPage === 1;
                var isLastPage = currentPage === totalPages;
                var functionName = paginatorPanelId == 'hierarchyTablePaginator' ? 'goToHierarchyPage' : 'goToMultiObjectPage';

                $pages.append('<a href="javascript:void(0);" onclick="showGlobalSpinner(true);' + functionName + '(0);" role="button" class="slds-button slds-button--neutral' + (isFirstPage ? ' noPointerEvents' : '') + '"' + (isFirstPage ? ' disabled' : '') + '><i data-icon="' + paginatorFirstIcon + '" class="slds-button__icon slds-button__icon--left"></i> First</a>');
                $pages.append('<a href="javascript:void(0);" onclick="showGlobalSpinner(true);' + functionName + '(' + (currentIndex - 1) + ');" role="button" class="slds-button slds-button--neutral' + (isFirstPage ? ' noPointerEvents' : '') + '"' + (isFirstPage ? ' disabled' : '') + '><i data-icon="' + paginatorPrevIcon + '" class="slds-button__icon slds-button__icon--left"></i></a>');

                pages.map(function(page, index) {
                    $pages.append('<a href="javascript:void(0);" onclick="showGlobalSpinner(true);' + functionName + '(' + (page - 1) + ');" role="button" class="slds-button ' + (page == currentPage ? 'slds-button--brand noPointerEvents' : 'slds-button--neutral') + '">' + page + '</a>');
                });

                $pages.append('<a href="javascript:void(0);" onclick="showGlobalSpinner(true);' + functionName + '(' + (currentIndex + 1) + ');" role="button" class="slds-button slds-button--neutral' + (isLastPage ? ' noPointerEvents' : '') + '"' + (isLastPage ? ' disabled' : '') + '><i data-icon="' + paginatorNextIcon + '" class="slds-button__icon slds-button__icon--right"></i></a>');
                $pages.append('<a href="javascript:void(0);" onclick="showGlobalSpinner(true);' + functionName + '(' + (totalPages - 1) + ');" role="button" class="slds-button slds-button--neutral' + (isLastPage ? ' noPointerEvents' : '') + '"' + (isLastPage ? ' disabled' : '') + '>Last <i data-icon="' + paginatorLastIcon + '" class="slds-button__icon slds-button__icon--right"></i></a>');

                $paginator.html($pages);

                //renderSvgIcons();
            } else {
                $paginator.empty();
            }
        };
    </script>

    <apex:form id="form-archiving-blank" styleClass="slds-hide">
        <apex:actionFunction action="{!cleanFormDataHandler}" name="cleanFormData" immediate="true" reRender="sObjectDateFieldsList, fillInputs" oncomplete="reRendered();showGlobalSpinner(false);"></apex:actionFunction>
    </apex:form>

    <apex:form id="form-archiving" styleClass="slds-tabs_scoped__content">
        <apex:actionFunction action="{!changeSelectedObject}" name="changeSelectedObject" immediate="true" reRender="dateTimeFieldTypes, relStructureOutput, sObjectDateFieldsList" oncomplete="renderObjectHierarchy();showGlobalSpinner(false);">
            <apex:param name="selectedObjectValue" assignTo="{!selectedObject}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!sortMultiObjectList}" name="sortMultiObjectList" immediate="true" reRender="multiObjectBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="OrderBy" assignTo="{!orderByMultiObject}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!sortHierarchyList}" name="sortHierarchyList" immediate="true" reRender="hierarchyBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="OrderBy" assignTo="{!orderByHierarchy}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!goToHierarchyPage}" name="goToHierarchyPage" immediate="true" reRender="hierarchyBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="pageNumber" assignTo="{!currentPageHierarchy}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!goToMultiObjectPage}" name="goToMultiObjectPage" immediate="true" reRender="multiObjectBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="pageNumber" assignTo="{!currentPageMultiObject}" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!saveScheduledProcess}" name="saveScheduledProcess" reRender="scheduledprocesses, hierarchyBackupPanel, multiObjectBackupPanel, fillInputs" oncomplete="showScheduledProcessModal(false);reRendered();showGlobalSpinner(false);"></apex:actionFunction>
        
        <apex:actionFunction action="{!selectScheduledProcess}" name="selectScheduledProcess" immediate="true" reRender="pageAlertMessage, sObjectDateFieldsList, fillInputs, dateTimeFieldTypes, relStructureOutput" oncomplete="showScheduledProcessModal(true);">
            <apex:param name="spId" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!deleteScheduledProcess}" name="deleteScheduledProcess" immediate="true" reRender="pageAlertMessage, hierarchyBackupPanel, multiObjectBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="spId" value="" />
        </apex:actionFunction>
        
        <apex:actionFunction action="{!retrySendingData}" name="retrySendingData" immediate="true" reRender="pageAlertMessage, hierarchyBackupPanel, multiObjectBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);">
            <apex:param name="spId" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!execScheduledProcess}" name="execScheduledProcess" immediate="true" oncomplete="updateScheduleProcessTable();" reRender="pageAlertMessage">
            <apex:param name="spId" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!abortScheduledProcess}" name="abortScheduledProcess" immediate="true" oncomplete="updateScheduleProcessTable();" reRender="pageAlertMessage">
            <apex:param name="spId" value="" />
        </apex:actionFunction>

        <apex:actionFunction action="{!deactivateScheduledProcess}" name="deactivateScheduledProcess" immediate="true" oncomplete="updateScheduleProcessTable();" reRender="pageAlertMessage">
            <apex:param name="spId" value="" />
        </apex:actionFunction>

        <apex:actionFunction name="reRenderReportPicklist" reRender="renderReportPicklist" oncomplete="setReportPicklist();"></apex:actionFunction>
        
        <apex:actionFunction action="{!updateScheduleProcessTable}" name="updateScheduleProcessTable" immediate="true" reRender="hierarchyBackupPanel, multiObjectBackupPanel" oncomplete="reRendered();showGlobalSpinner(false);"></apex:actionFunction>

        <apex:actionFunction name="initializeUsersPicklist" reRender="initializeUsersPicklist" oncomplete="_initializeUsersPicklist();"></apex:actionFunction>

        <apex:outputPanel id="pageAlertMessage">
            <script>
                var pageAlertMessage = '{!pageAlertMessage}';
                if(pageAlertMessage) {
                    alert(pageAlertMessage);
                    showGlobalSpinner(false);
                }
            </script>
        </apex:outputPanel>
        
        <div class="slds-tabs_default" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
            <ul class="slds-tabs_default__nav" role="tablist">
                <li class="slds-tabs_default__item slds-is-active" title="Hierarchy Processes" role="presentation">
                    <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" aria-selected="true" aria-controls="tab-archiving_scheduledprocesses" id="tab-archiving_scheduledprocesses__item">Hierarchy Processes</a>
                </li>
                <li class="slds-tabs_default__item" title="Object(s) Backup" role="presentation">
                    <a class="slds-tabs_default__link" href="javascript:void(0);" role="tab" aria-selected="false" aria-controls="tab-archiving_multiobjectbackup" id="tab-archiving_multiobjectbackup__item">Object(s) Backup</a>
                </li>
            </ul>
            <div id="tab-archiving_scheduledprocesses" class="slds-tabs_default__content slds-show" role="tabpanel" aria-labelledby="tab-archiving_scheduledprocesses__item">                
                <div class="slds-clearfix slds-p-bottom_medium">
                    <div class="slds-clearfix">
                        <div class="slds-float_left">
                            <button id="createScheduledProcess" class="slds-button slds-button_brand">Create</button>
                            <button class="slds-button slds-button_icon" onclick="showGlobalSpinner(true);updateScheduleProcessTable();return false;">
                                <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#refresh')}" class="slds-button__icon"></i>
                                <span class="slds-assistive-text">Refresh</span>
                            </button>
                        </div>
                    </div>
                </div>


                <apex:outputPanel id="hierarchyBackupPanel" styleClass="scheduledProcessesContainer">
                    <apex:dataTable value="{!currentPageHierarchyList}" var="sp" id="scheduledprocesses" styleClass="slds-table slds-table_bordered slds-table_cell-buffer">        
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'name', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('name'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Name">Name</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputLink value="/{!URLFOR(sp.GRAXScheduleProcess.Id)}" target="_blank" html-data-id="{!sp.GRAXScheduleProcess.Id}">{!sp.name}</apex:outputLink>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Active__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Active__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Active">Active</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!IF(sp.isActive, 'Yes', 'No')}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Last_Run_Date__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Last_Run_Date__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Date Last Ran">Date Last Ran</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.lastRunDate}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Next_Run_Date__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Next_Run_Date__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Next Run Date">Next Run Date</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.nextRunDate}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Object_Name__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Object_Name__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Parent Object">Parent Object</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.parentObject}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Archive__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Archive__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Archive">Archive</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.archive}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByHierarchy == 'Status__c', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortHierarchyList('Status__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Status">Status</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.status}"/>
                        </apex:column>

                        <apex:column >
                            <apex:facet name="header">
                                <span class="slds-p-right_small" title="Current Stage Progress">Current Stage Progress</span>
                            </apex:facet>
                            <apex:outputPanel layout="block">
                                <span class="{!IF(sp.isRunning, '', 'slds-hide')}">
                                    <apex:outputText value="{!sp.progress}"/>
                                </span>
    
                                <apex:outputPanel rendered="{!sp.status == 'Running' && sp.objectsProcessed > 0 && sp.GRAXScheduleProcess.Target_Report__c == null}">
                                    <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="progress_additional_information_{!sp.GRAXScheduleProcess.Id}" title="Additional Info">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text"></span>
                                    </button>
                                    
                                    <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide progress_additional_information" role="tooltip" id="progress_additional_information_{!sp.GRAXScheduleProcess.Id}" aria-hidden="true">
                                        <div class="slds-popover__body">
                                            Backing up child object: {!sp.currentChildObjectName}.<apex:outputPanel layout="inline" rendered="{!sp.requireAdditionalParentIdsToRetrieve}"> Process will require additional parent ids to be retrieved for the current object backup to complete.</apex:outputPanel>
                                        </div>
                                    </div>                                                           
                                </apex:outputPanel>                     
                            </apex:outputPanel>
                        </apex:column>
    
                        <apex:column >
                            <apex:facet name="header">
                                <span class="slds-assistive-text">Actions</span>
                            </apex:facet>
                            <apex:outputPanel >
                                <div class="slds-dropdown-trigger slds-dropdown-trigger_click">
                                    <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" title="Show Actions">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#down')}" class="slds-button__icon"></i>
                                        <span class="slds-assistive-text">Show Actions</span>
                                    </button>
                                    <div class="slds-dropdown slds-dropdown_right slds-dropdown_actions">
                                        <ul class="slds-dropdown__list" role="menu">
                                            <apex:outputPanel layout="none" rendered="{!sp.isActive}">
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <apex:outputPanel layout="none" rendered="{!sp.isRunning == true}">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);abortScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Abort">Abort</span>
                                                        </a>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="none" rendered="{!sp.isRunning == false}">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);execScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Execute Now">Execute Now</span>
                                                        </a>
                                                    </apex:outputPanel>
                                                </li>
                                                <apex:outputPanel layout="none" rendered="{!sp.isRunning == false}">
                                                    <li class="slds-dropdown__item" role="presentation">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);deactivateScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Deactivate">Deactivate</span>
                                                        </a>
                                                    </li>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{! sp.preventEdit == false }" >
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <a href="javascript:void(0);" onclick="showGlobalSpinner(true);editScheduledProcess('{!sp.GRAXScheduleProcess.Id}', false);return false;" role="menuitem" tabindex="0">
                                                        <span class="slds-truncate" title="Edit">Edit</span>
                                                    </a>
                                                </li>
                                            </apex:outputPanel>
                                            <li class="slds-dropdown__item" role="presentation">
                                                <a href="javascript:void(0);" onclick="showGlobalSpinner(true);deleteScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="-1">
                                                    <span class="slds-truncate" title="Delete">Delete</span>
                                                </a>
                                            </li>
                                            <apex:outputPanel layout="none" rendered="{!sp.status == 'Completed - Errors sending data'}">
                                               <li class="slds-dropdown__item" role="presentation">
                                                   <a href="javascript:void(0);" onclick="showGlobalSpinner(true);retrySendingData('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="-1">
                                                       <span class="slds-truncate" title="Re-try sending data">Re-try sending data</span>
                                                   </a>
                                               </li>
                                            </apex:outputPanel>
                                        </ul>
                                    </div>
                                </div>
                            </apex:outputPanel>
                        </apex:column>
                    </apex:dataTable>

                    <div id="hierarchyTablePaginator" class="-x-small-buttons--horizontal slds-p-top_small" />

                    <script>
                        renderPaginator('hierarchyTablePaginator', {!totalRowsHierarchy}, {!rowsPerPage}, {!currentPageHierarchy});
                    </script>
                </apex:outputPanel>
            </div>

            <div id="tab-archiving_multiobjectbackup" class="slds-tabs_default__content slds-hide" role="tabpanel" aria-labelledby="tab-archiving_multiobjectbackup__item">                
                <div class="slds-clearfix slds-p-bottom_medium">
                    <div class="slds-clearfix">
                        <div class="slds-float_left">
                            <button id="createMultiobjectBackup" class="slds-button slds-button_brand">Create</button>
                            <button class="slds-button slds-button_icon" onclick="showGlobalSpinner(true);updateScheduleProcessTable();return false;">
                                <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#refresh')}" class="slds-button__icon"></i>
                                <span class="slds-assistive-text">Refresh</span>
                            </button>
                        </div>
                    </div>
                </div>
                <apex:outputPanel id="multiObjectBackupPanel" styleClass="scheduledProcessesContainer">
                    <apex:dataTable value="{!currentPageMultiObjectList}" var="sp" id="multiobjectbackup" styleClass="slds-table slds-table_bordered slds-table_cell-buffer">        
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByMultiObject == 'name', 'slds-is-sorted slds-is-sorted_' + sortOrderHierarchy, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortMultiObjectList('name'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Name">Name</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputLink value="/{!URLFOR(sp.GRAXScheduleProcess.Id)}" target="_blank" html-data-id="{!sp.GRAXScheduleProcess.Id}">{!sp.name}</apex:outputLink>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByMultiObject == 'Active__c', 'slds-is-sorted slds-is-sorted_' + sortOrderMultiObject, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortMultiObjectList('Active__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Active">Active</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!IF(sp.isActive, 'Yes', 'No')}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByMultiObject == 'Last_Run_Date__c', 'slds-is-sorted slds-is-sorted_' + sortOrderMultiObject, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortMultiObjectList('Last_Run_Date__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Date Last Ran">Date Last Ran</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.lastRunDate}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByMultiObject == 'Next_Run_Date__c', 'slds-is-sorted slds-is-sorted_' + sortOrderMultiObject, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortMultiObjectList('Next_Run_Date__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Next Run Date">Next Run Date</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.nextRunDate}"/>
                        </apex:column>
    
                        <apex:column headerClass="slds-text-title_caps slds-is-sortable {!IF(orderByMultiObject == 'Status__c', 'slds-is-sorted slds-is-sorted_' + sortOrderMultiObject, '')}">
                            <apex:facet name="header">
                                <div class="slds-th__action" role="button" tabindex="0" onclick="showGlobalSpinner(true);sortMultiObjectList('Status__c'); return false;">
                                  <div class="slds-grid slds-grid_vertical-align-center slds-has-flexi-truncate">
                                    <span class="slds-truncate" title="Status">Status</span>
                                    <span class="slds-icon_container slds-icon-utility-arrowdown">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#arrowdown')}" class="slds-icon slds-icon-text-default slds-is-sortable__icon"></i>
                                    </span>
                                  </div>
                                </div>
                            </apex:facet>
                            <apex:outputText value="{!sp.status}"/>
                        </apex:column>

                        <apex:column >
                            <apex:facet name="header">
                                <span class="slds-p-right_small" title="Current Stage Progress">Current Stage Progress</span>
                            </apex:facet>
                            <apex:outputPanel layout="block">
                                <span class="{!IF(sp.isRunning, '', 'slds-hide')}">
                                    <apex:outputText value="{!sp.progress}"/>
                                </span>
                            </apex:outputPanel>
                        </apex:column>
    
                        <apex:column >
                            <apex:facet name="header">
                                <span class="slds-assistive-text">Actions</span>
                            </apex:facet>
                            <apex:outputPanel >
                                <div class="slds-dropdown-trigger slds-dropdown-trigger_click">
                                    <button class="slds-button slds-button_icon slds-button_icon-border-filled slds-button_icon-x-small" aria-haspopup="true" title="Show Actions">
                                        <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#down')}" class="slds-button__icon"></i>
                                        <span class="slds-assistive-text">Show Actions</span>
                                    </button>
                                    <div class="slds-dropdown slds-dropdown_right slds-dropdown_actions">
                                        <ul class="slds-dropdown__list" role="menu">
                                            <apex:outputPanel layout="none" rendered="{!sp.isActive}">
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <apex:outputPanel layout="none" rendered="{!sp.isRunning == true}">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);abortScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Abort">Abort</span>
                                                        </a>
                                                    </apex:outputPanel>
                                                    <apex:outputPanel layout="none" rendered="{!sp.isRunning == false}">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);execScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Execute Now">Execute Now</span>
                                                        </a>
                                                    </apex:outputPanel>
                                                </li>
                                                <apex:outputPanel layout="none" rendered="{!sp.isRunning == false}">
                                                    <li class="slds-dropdown__item" role="presentation">
                                                        <a href="javascript:void(0);" onclick="showGlobalSpinner(true);deactivateScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="0">
                                                            <span class="slds-truncate" title="Deactivate">Deactivate</span>
                                                        </a>
                                                    </li>
                                                </apex:outputPanel>
                                            </apex:outputPanel>
                                            <apex:outputPanel layout="none" rendered="{! sp.preventEdit == false }" >
                                                <li class="slds-dropdown__item" role="presentation">
                                                    <a href="javascript:void(0);" onclick="showGlobalSpinner(true);editScheduledProcess('{!sp.GRAXScheduleProcess.Id}', true);return false;" role="menuitem" tabindex="0">
                                                        <span class="slds-truncate" title="Edit">Edit</span>
                                                    </a>
                                                </li>
                                            </apex:outputPanel>
                                            <li class="slds-dropdown__item" role="presentation">
                                                <a href="javascript:void(0);" onclick="showGlobalSpinner(true);deleteScheduledProcess('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="-1">
                                                    <span class="slds-truncate" title="Delete">Delete</span>
                                                </a>
                                            </li>
                                            <apex:outputPanel layout="none" rendered="{!sp.status == 'Completed - Errors sending data'}">
                                               <li class="slds-dropdown__item" role="presentation">
                                                   <a href="javascript:void(0);" onclick="showGlobalSpinner(true);retrySendingData('{!sp.GRAXScheduleProcess.Id}');return false;" role="menuitem" tabindex="-1">
                                                       <span class="slds-truncate" title="Re-try sending data">Re-try sending data</span>
                                                   </a>
                                               </li>
                                            </apex:outputPanel>
                                        </ul>
                                    </div>
                                </div>
                            </apex:outputPanel>
                        </apex:column>
                    </apex:dataTable>

                    <div id="multiObjectTablePaginator" class="-x-small-buttons--horizontal slds-p-top_small" />

                    <script>
                        renderPaginator('multiObjectTablePaginator', {!totalRowsMultiObject}, {!rowsPerPage}, {!currentPageMultiObject});
                    </script>
                </apex:outputPanel>
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="progress_help" aria-hidden="true">
            <div class="slds-popover__body">
                Displays the total number of objects that were processed in your selection.
            </div>
        </div>

        <section id="scheduledProcessModal" data-multi="false" role="dialog" tabindex="-1" aria-labelledby="modal-ScheduledProcess" aria-modal="true" aria-describedby="modal-content-ScheduledProcess" class="slds-modal slds-modal_medium slds-hide">
            <div class="slds-modal__container" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                
                <div role="alert" style="height:100px;top:0;" class="slds-notify slds-notify_alert slds-theme_alert-texture slds-theme_info" data-read-only="true">
                    <span class="slds-assistive-text">info</span>
                    <span class="slds-icon_container slds-icon-utility-warning slds-m-right_x-small" title="Warning">
                        <svg aria-hidden="true" class="slds-button__icon">
                            <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                        </svg>
                    </span>
                    <h2>You can only edit certain attributes of an Incremental Schedule Process after it has run.</h2>

                    <button class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close" style="z-index: 999; top: 0; right: 0; height: 100%;">
                        <svg class="slds-button__icon slds-button__icon_large" aria-hidden="true">
                            <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                        </svg>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                </div>
                
                <header class="slds-modal__header">
                    <h2 id="modal-ScheduledProcess" class="slds-text-heading_medium slds-hyphenate">GRAX Schedule Job<span data-read-only="true">&nbsp;(Incremental)</span></h2>
                </header>
                
                <div class="slds-modal__content slds-p-around_medium" id="modal-content-ScheduledProcess">
                    <apex:inputHidden id="scheduledProcessType" value="{!scheduledProcessType}"></apex:inputHidden>
                    <apex:inputHidden id="objectJSON" value="{!objectJSON}" html-data-id="objectJSON"></apex:inputHidden>
                    <apex:inputHidden id="parentsSelection" value="{!parentsSelection}" html-data-id="parentsSelection"></apex:inputHidden>
                    <apex:inputHidden id="usersSelection" value="{!usersSelection}" html-data-id="usersSelection"></apex:inputHidden>

                    <div class="slds-section slds-is-open" data-read-only-editable="true">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Process Details">Process Details</span>
                        </h3>
                        <div>
                            <div class="slds-grid slds-grid_vertical-align-center slds-p-vertical_small">
                                <div class="slds-col slds-container--small">
                                    <div class="slds-form-element">
                                        <label class="slds-form-element__label" for="colDt_q">Name</label>
                                        <div class="slds-form-element__control">
                                            <apex:inputText id="spName" value="{!spName}" styleClass="slds-input"></apex:inputText>
                                        </div>
                                    </div>
                                </div>

                                <div class="help_button_container">
                            <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="spname_help" title="Help">
                                <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                <span class="slds-assistive-text">Help</span>
                            </button>
                                </div>
                                
                                <div class="slds-p-top_small">
                                    <div class="slds-form-element slds-is-relative" id="isActive" data-read-only-editable="true">
                                        <div style="display:inline-block; margin-left:20px;" id="isActiveToggle">
                                            <label class="slds-checkbox_toggle">
                                                <span class="slds-form-element__label slds-m-bottom_none">Is Active?</span>
                                                <apex:inputCheckbox id="active" value="{!active}"/>
                                                <span class="slds-checkbox_faux_container" aria-live="assertive">
                                                    <span class="slds-checkbox_faux"></span>
                                                    <span class="slds-checkbox_on">Yes</span>
                                                    <span class="slds-checkbox_off">No</span>
                                                </span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                                <div class="help_button_container" style="margin-left: 0;">
                                    <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="spisactive_help" title="Help">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text">Help</span>
                                    </button>
                            </div>
                        </div>
                    </div>

                        <div>
                            <div class="slds-grid slds-grid_vertical-align-center slds-p-vertical_small" data-multi="false" style="padding-top: 0;">
                                <div class="slds-col slds-container--small">
                                    <div class="slds-form-element">
                                        <label class="slds-form-element__label" for="colDt_q">Salesforce Object</label>
                                    </div>
                        <div aria-hidden="false" class="slds-section__content">
                            <div class="slds-grid slds-grid_vertical-align-center">
                                <div class="slds-col slds-grow-none slds-m-right_small">
                                    <div class="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <div class="slds-select_container">
                                                <select id="objectList" onchange="showGlobalSpinner(true);changeSelectedObject(this.value);" class="slds-select" size="1" disabled="disabled">
                                                    <option value="" disabled="disabled" selected="selected">-- SELECT SALESFORCE OBJECT --</option>
                                                </select>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                            </div> 
                        </div>

                    </div>
                    <div class="slds-is-open slds-p-bottom_medium" id="ObjectsSection" data-multi="true" style="padding-top: 0;">
                        <div class="slds-form-element">
                            <label class="slds-form-element__label" for="colDt_q">Salesforce Object(s)</label>
                        </div>
                        <table class="slds-table slds-table_bordered slds-table_resizable-cols slds-table_fixed-layout" role="grid">
                            <thead>
                                <tr class="slds-line-height_reset">
                                    <th style="width: 3.25rem;" class="slds-text-align_right" scope="col">
                                        <div class="slds-th__action slds-th__action_form">
                                            <span class="slds-checkbox">
                                                <input id="ObjectsSelectionAll" tabindex="-1" aria-labelledby="check-select-all-label check-group-header" type="checkbox" />
                                                <label class="slds-checkbox__label" for="ObjectsSelectionAll" id="check-select-all-label">
                                                    <span class="slds-checkbox_faux"></span>
                                                    <span class="slds-form-element__label slds-assistive-text">Select All</span>
                                                </label>
                                            </span>
                                        </div>
                                    </th>
                                    <th class="slds-text-title_caps" aria-label="Object Name" scope="col">
                                        <span class="slds-truncate" title="Object Name">Object Name</span>
                                    </th>
                                </tr>
                            </thead>
                        </table>
                        <div class="slds-is-relative slds-scrollable_y slds-p-bottom_small">
                            <div id="ObjectsSelection">
                                <div class="slds-align_absolute-center" style="height: 4rem;padding-top: 3rem;">
                                    <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_inline" style="">
                                        <span class="slds-assistive-text">Loading</span>
                                        <div class="slds-spinner__dot-a"></div>
                                        <div class="slds-spinner__dot-b"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
    
                    <div class="slds-section slds-is-open slds-p-top_large">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Select Filter Criteria">Select Filter Criteria</span>
                        </h3>
                        
                        <div aria-hidden="false" class="slds-section__content">
                            <fieldset class="slds-form-element" data-multi="false">
                                <apex:inputHidden id="filterCriteriaType" value="{!filterCriteriaType}"></apex:inputHidden>
                                <div class="slds-form-element__control">
                                    <div class="slds-radio_button-group">
                                        <span class="slds-button slds-radio_button">
                                            <input id="filterCriteriaTypeDate" name="filterCriteriaTypeOptions" value="Date" type="radio" onchange="radioChange(this,'{!$Component.filterCriteriaType}');" checked="checked" />
                                            <label class="slds-radio_button__label" for="filterCriteriaTypeDate">
                                                <span class="slds-radio_faux">Date</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="filterCriteriaTypeReport" name="filterCriteriaTypeOptions" value="Report" type="radio" onchange="radioChange(this,'{!$Component.filterCriteriaType}');" />
                                            <label class="slds-radio_button__label" for="filterCriteriaTypeReport">
                                                <span class="slds-radio_faux">Report</span>
                                            </label>
                                        </span>
                                    </div>
                                </div>
                            </fieldset>

                            <section data-filterCriteriaType="Date">
                                <div class="slds-p-top_small" data-multi="false">
                                    <div class="slds-grid slds-grid_vertical-align-center">
                                        <div class="slds-col slds-grow-none slds-m-right_small">
                                            <div class="slds-form-element">
                                                <label class="slds-form-element__label">Select your Date Field</label>
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:selectList id="sObjectDateFieldsList" value="{!sObjectDateField}" multiselect="false" size="1" styleClass="slds-select sObjectDateFieldsList">
                                                            <apex:selectOptions value="{!sObjectDateFields}"/>
                                                        </apex:selectList>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
        
                                <div data-multi="false">
                                    <div class="slds-grid slds-grid_vertical-align-center slds-p-vertical_small">
                                        <div class="slds-col slds-grow-none">
                                            <div class="slds-form-element">
                                                <label class="slds-form-element__label" for="colDt_q">Select the Date from when this field value is applicable on the record</label>
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <select id="colDt_q" name="colDt_q" onchange="window.changecolDt(this.options[this.selectedIndex].value)" class="slds-select">
                                                            <option value="custom">Custom</option>
                                                        
                                                            <optgroup label="Calendar Year">
                                                                <option value="cury">Current CY</option>
                                                                <option value="prevy">Previous CY</option>
                                                                <option value="prev2y">Previous 2 CY</option>
                                                                <option value="ago2y">2 CY Ago</option>
                                                                <option value="prevcury">Current and Previous CY</option>
                                                                <option value="prevcur2y">Current and Previous 2 CY</option>
                                                            </optgroup>
                                                        
                                                            <optgroup label="Calendar Quarter">
                                                                <option value="currentq">Current CQ</option>
                                                                <option value="curprevq">Current and Previous CQ</option>
                                                                <option value="prevq">Previous CQ</option>
                                                            </optgroup>
                                                        
                                                            <optgroup label="Calendar Month">
                                                                <option value="lastmonth">Last Month</option>
                                                                <option value="thismonth">This Month</option>
                                                                <option value="lastthismonth">Current and Previous Month</option>
                                                            </optgroup>
                                                        
                                                            <optgroup label="Calendar Week">
                                                                <option value="lastweek">Last Week</option>
                                                                <option value="thisweek">This Week</option>
                                                            </optgroup>
                                                        
                                                            <optgroup label="Day">
                                                                <option value="yesterday">Yesterday</option>
                                                                <option value="today">Today</option>
                                                                <option value="tomorrow">Tomorrow</option>
                                                                <option value="last7">Last 7 Days</option>
                                                                <option value="last30">Last 30 Days</option>
                                                                <option value="last60">Last 60 Days</option>
                                                                <option value="last90">Last 90 Days</option>
                                                                <option value="last120">Last 120 Days</option>                                    
                                                            </optgroup>
                                                        </select>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="help_button_container">
                                            <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="timerange_help" title="Help">
                                                <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                <span class="slds-assistive-text">Help</span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
        
                                <div class="slds-grid slds-grid_vertical-align-center">
                                    <div class="slds-col slds-grow-none slds-m-right_small">
                                        <div class="slds-form--stacked slds-float--left slds-form_compound">

                                            <fieldset class="slds-form-element">
                                                <div class="slds-form-element__group">
                                                    <div class="slds-form-element__row">
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label" data-multi="false">Start Date</label>
                                                            <label class="slds-form-element__label" data-multi="true">Last Modified Date</label>
                                                            <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="lastModifyDate_help" title="Help"  data-multi="true">
                                                                <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                                <span class="slds-assistive-text">Help</span>
                                                            </button>
                                                            <apex:inputHidden id="targetDate" value="{!targetDate}"></apex:inputHidden>
                                                            <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right slds-form-element__date">
                                                                <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                                </svg>
                                                                <input type="text" id="targetDate_date" value="{!targetDate}" class="slds-input targetDate" />
                                                            </div>
                                                        </div>
                
                                                        <div class="slds-form-element timeSelect">
                                                            <label class="slds-form-element__label">Start Time</label>
                                                            <div class="slds-form-element__control">
                                                                <div class="slds-select_container">
                                                                    <apex:selectList id="targetTime" value="{!targetTime}" multiselect="false" size="1" styleClass="slds-select targetTime">
                                                                        <apex:selectOption itemValue="00:00" itemLabel="12 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="01:00" itemLabel="01 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="02:00" itemLabel="02 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="03:00" itemLabel="03 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="04:00" itemLabel="04 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="05:00" itemLabel="05 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="06:00" itemLabel="06 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="07:00" itemLabel="07 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="08:00" itemLabel="08 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="09:00" itemLabel="09 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="10:00" itemLabel="10 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="11:00" itemLabel="11 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="12:00" itemLabel="12 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="13:00" itemLabel="01 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="14:00" itemLabel="02 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="15:00" itemLabel="03 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="16:00" itemLabel="04 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="17:00" itemLabel="05 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="18:00" itemLabel="06 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="19:00" itemLabel="07 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="20:00" itemLabel="08 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="21:00" itemLabel="09 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="22:00" itemLabel="10 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="23:00" itemLabel="11 PM"></apex:selectOption>
                                                                    </apex:selectList>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="help_button_container">
                                                            <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="timezone_help" title="Help">
                                                                <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                                <span class="slds-assistive-text">Help</span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </fieldset>

                                            <fieldset class="slds-form-element" data-multi="false">
                                                <div class="slds-form-element__group">
                                                    <div class="slds-form-element__row">
                                                        <apex:inputHidden id="targetEndDate" value="{!targetEndDate}"></apex:inputHidden>
                                                        <div class="slds-form-element">
                                                            <label class="slds-form-element__label">End Date</label>
                                                            <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right slds-form-element__date">
                                                                <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                                    <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                                </svg>
                                                                <input id="targetEndDate_date" value="{!targetEndDate}" class="slds-input targetEndDate"/>
                                                            </div>
                                                        </div>
                
                                                        <div class="slds-form-element timeSelect">
                                                            <label class="slds-form-element__label">End Time</label>
                                                            <div class="slds-form-element__control">
                                                                <div class="slds-select_container">
                                                                    <apex:selectList id="targetEndTime" value="{!targetEndTime}" multiselect="false" size="1" styleClass="slds-select targetEndTime">
                                                                        <apex:selectOption itemValue="00:00" itemLabel="12 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="01:00" itemLabel="01 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="02:00" itemLabel="02 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="03:00" itemLabel="03 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="04:00" itemLabel="04 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="05:00" itemLabel="05 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="06:00" itemLabel="06 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="07:00" itemLabel="07 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="08:00" itemLabel="08 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="09:00" itemLabel="09 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="10:00" itemLabel="10 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="11:00" itemLabel="11 AM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="12:00" itemLabel="12 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="13:00" itemLabel="01 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="14:00" itemLabel="02 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="15:00" itemLabel="03 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="16:00" itemLabel="04 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="17:00" itemLabel="05 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="18:00" itemLabel="06 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="19:00" itemLabel="07 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="20:00" itemLabel="08 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="21:00" itemLabel="09 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="22:00" itemLabel="10 PM"></apex:selectOption>
                                                                        <apex:selectOption itemValue="23:00" itemLabel="11 PM"></apex:selectOption>
                                                                    </apex:selectList>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="help_button_container">
                                                            <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="timezone_help" title="Help">
                                                                <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                                <span class="slds-assistive-text">Help</span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </fieldset>

                                        </div>
                                    </div>
                                </div>
                            </section>

                            <section data-filterCriteriaType="Report" class="slds-p-top_small slds-hide">
                                <div class="slds-grid slds-grid_vertical-align-center">
                                    <div class="slds-col slds-grow-none">
                                        <div class="slds-form-element">
                                            <label class="slds-form-element__label">Select your Report</label>
                                            <div class="slds-form-element__control">
                                                <div class="slds-select_container">
                                                    <apex:inputHidden id="targetReport" value="{!targetReport}"></apex:inputHidden>
                                                    <select id="reportList" class="slds-select reportList">
                                                        <option value="" selected="selected" disabled="disabled">-- SELECT REPORT --</option>
                                                    </select>

                                                    <apex:outputPanel id="renderReportPicklist">
                                                        <script>
                                                            addReportListOptions({!reportsJSON});
                                                            updateSaveState();
                                                        </script>
                                                    </apex:outputPanel>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="help_button_container">
                                        <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="report_help" title="Help">
                                            <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                            <span class="slds-assistive-text">Help</span>
                                        </button>
                                    </div>
                                </div>
                            </section>
                        </div>
                    </div>
    
                    <div class="slds-section slds-is-open slds-p-top_large slds-hide"><!-- data-multi="false">-->
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Select Criteria">Select Criteria</span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content">
                            <fieldset class="slds-form-element">
                                <apex:inputHidden id="criteria" value="{!criteria}"></apex:inputHidden>
                                <div class="slds-form-element__control">
                                    <span class="slds-radio">
                                        <input id="criteriaOption1" name="criteriaOptions" value="Main Object not modified" type="radio" onchange="radioChange(this,'{!$Component.criteria}');" />
                                        <label class="slds-radio__label" for="criteriaOption1">
                                            <span class="slds-radio_faux"></span>
                                            <span class="slds-form-element__label">Top level object hasn’t been modified since this date.</span>
                                        </label>
                                    </span>
                                    <span class="slds-radio">
                                        <input id="criteriaOption2" name="criteriaOptions" value="Main Object and Children not modified" type="radio" onchange="radioChange(this,'{!$Component.criteria}');" disabled="disabled" />
                                        <label class="slds-radio__label" for="criteriaOption2">
                                            <span class="slds-radio_faux"></span>
                                            <span class="slds-form-element__label">Top level object AND any related records selected haven’t been modified since this date.</span>
                                        </label>
                                    </span>
                                </div>
                            </fieldset>
                        </div>
                    </div>
    
                    <div class="slds-section slds-is-open slds-p-top_large" data-read-only-editable="true">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Schedule">Schedule</span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content">
                            <fieldset class="slds-form-element">
                                <apex:inputHidden id="schedule" value="{!schedule}"></apex:inputHidden>
                                <div class="slds-form-element__control">
                                    <div class="slds-radio_button-group">
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleOnce" name="scheduleOptions" value="Once" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleOnce">
                                                <span class="slds-radio_faux">Once</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleDaily" name="scheduleOptions" value="Daily" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleDaily">
                                                <span class="slds-radio_faux">Daily</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleWeekly" name="scheduleOptions" value="Weekly" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleWeekly">
                                                <span class="slds-radio_faux">Weekly</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleMonthly" name="scheduleOptions" value="Monthly" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleMonthly">
                                                <span class="slds-radio_faux">Monthly</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleQuarterly" name="scheduleOptions" value="Quarterly" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleQuarterly">
                                                <span class="slds-radio_faux">Quarterly</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleSemiAnnually" name="scheduleOptions" value="Semi-Annually" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleSemiAnnually">
                                                <span class="slds-radio_faux">Semi-Annually</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleAnnually" name="scheduleOptions" value="Annually" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleAnnually">
                                                <span class="slds-radio_faux">Annually</span>
                                            </label>
                                        </span>
                                        <span class="slds-button slds-radio_button">
                                            <input id="scheduleCustom" name="scheduleOptions" value="Custom" type="radio" onchange="radioChange(this,'{!$Component.schedule}');" />
                                            <label class="slds-radio_button__label" for="scheduleCustom">
                                                <span class="slds-radio_faux">Custom</span>
                                            </label>
                                        </span>
                                    </div>
                                </div>
                            </fieldset>
    
                            <div class="slds-form slds-form--compound slds-p-top_small">
                                <fieldset id="frequencySection" class="slds-form-element slds-hide">
                                    <div class="slds-form-element__group">
                                        <div class="slds-form-element__row">
                                            <div class="slds-form-element">
                                                <label class="slds-form-element__label">Frequency Type</label>
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:selectList id="frequencyType" value="{!frequencyType}" multiselect="false" size="1" styleClass="slds-select frequencyType">
                                                            <apex:selectOption itemValue="Hours" itemLabel="Hours"></apex:selectOption>
                                                            <apex:selectOption itemValue="Days" itemLabel="Days"></apex:selectOption>
                                                            <apex:selectOption itemValue="Weeks" itemLabel="Weeks"></apex:selectOption>
                                                            <apex:selectOption itemValue="Months" itemLabel="Months"></apex:selectOption>
                                                            <apex:selectOption itemValue="Years" itemLabel="Years"></apex:selectOption>
                                                        </apex:selectList>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="slds-form-element">
                                                <label class="slds-form-element__label">Frequency Value</label>
                                                <div class="slds-form-element__control">
                                                    <apex:inputText id="frequencyValue" value="{!frequencyValue}" styleClass="slds-input"></apex:inputText>
                                                </div>
                                            </div>

                                            <div class="help_button_container">
                                                <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="frequency_help" title="Help">
                                                    <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                    <span class="slds-assistive-text">Help</span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>

                                <fieldset class="slds-form-element">
                                    <div class="slds-form-element__group">
                                        <div class="slds-form-element__row">
                                            <div class="slds-form-element">
                                                <apex:inputHidden id="scheduleStartDate" value="{!scheduleStartDate}"></apex:inputHidden>
                                                <label class="slds-form-element__label">Schedule Start Date</label>
                                                <div class="slds-form-element__control slds-input-has-icon slds-input-has-icon--right slds-form-element__date">
                                                    <svg aria-hidden="true" class="slds-input__icon slds-icon-text-default">
                                                        <use xlink:href="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#event')}"></use>
                                                    </svg>
                                                    <input id="scheduleStartDate_date" value="{!scheduleStartDate}" class="slds-input scheduleStartDate"/>
                                                </div>
                                            </div>
    
                                            <div class="slds-form-element">
                                                <label class="slds-form-element__label">Schedule Start Time</label>
                                                <div class="slds-form-element__control">
                                                    <div class="slds-select_container">
                                                        <apex:selectList id="scheduleStartTime" value="{!scheduleStartTime}" multiselect="false" size="1" styleClass="slds-select scheduleStartTime">
                                                            <apex:selectOption itemValue="00:00" itemLabel="12 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="01:00" itemLabel="01 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="02:00" itemLabel="02 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="03:00" itemLabel="03 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="04:00" itemLabel="04 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="05:00" itemLabel="05 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="06:00" itemLabel="06 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="07:00" itemLabel="07 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="08:00" itemLabel="08 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="09:00" itemLabel="09 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="10:00" itemLabel="10 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="11:00" itemLabel="11 AM"></apex:selectOption>
                                                            <apex:selectOption itemValue="12:00" itemLabel="12 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="13:00" itemLabel="01 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="14:00" itemLabel="02 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="15:00" itemLabel="03 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="16:00" itemLabel="04 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="17:00" itemLabel="05 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="18:00" itemLabel="06 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="19:00" itemLabel="07 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="20:00" itemLabel="08 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="21:00" itemLabel="09 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="22:00" itemLabel="10 PM"></apex:selectOption>
                                                            <apex:selectOption itemValue="23:00" itemLabel="11 PM"></apex:selectOption>
                                                        </apex:selectList>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="help_button_container">
                                                <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="timezone_help" title="Help">
                                                    <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                                    <span class="slds-assistive-text">Help</span>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </fieldset>
                            </div>
                        </div>
                    </div>

                    <div class="slds-section slds-is-open slds-p-top_large" data-read-only-editable="true">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Backup Options">Backup Options</span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content">

                            <div class="slds-form-element slds-is-relative" id="isArchive" data-multi="false" data-read-only-editable="false">
                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground slds-hide" id="archive_help" aria-hidden="true">
                                    <div class="slds-popover__body slds-text-align_left">
                                        Archive - This will Back up and then delete the record(s) from Salesforce.
                                        <br/>
                                        Back up - This will Back up and NOT delete the record(s) from Salesforce.
                                    </div>
                                </div>
                                <div style="display:inline-block" id="isArchiveToggle">
                                    <button id="archive_help_button" class="slds-button slds-button_icon slds-button slds-button_icon" style="float:right;font-size:.75rem;line-height:1.5;" title="Help">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text">Help</span>
                                    </button>
                                    <label class="slds-checkbox_toggle">
                                        <span class="slds-form-element__label slds-m-bottom_none">Archive</span>
                                        <apex:inputCheckbox id="archive" value="{!archive}" disabled="{!!gp.ifHasBackupArchivePermission}"/>
                                        <span class="slds-checkbox_faux_container" aria-live="assertive">
                                            <span class="slds-checkbox_faux"></span>
                                            <span class="slds-checkbox_on">Yes - <span style="position:absolute;padding-left: 0.25rem;">(Delete records)</span></span>
                                            <span class="slds-checkbox_off">No - <span style="position:absolute;padding-left: 0.25rem;">(Backup Only)</span></span>
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <apex:outputPanel layout="none" rendered="{!gp.isArchiveMaster}">
                                <div class="slds-form-element slds-is-relative" id="isOverrideArchive" data-multi="false" data-read-only-editable="false">
                                    <div style="display:inline-block" id="isArchiveToggle">
                                        <label class="slds-checkbox_toggle">
                                            <span class="slds-form-element__label slds-m-bottom_none">Override Object Hierarchy</span>
                                            <apex:inputCheckbox id="overrideArchive" value="{!overrideArchive}" disabled="{!!gp.ifHasOverrideArchivePermission}"/>
                                            <span class="slds-checkbox_faux_container" aria-live="assertive">
                                                <span class="slds-checkbox_faux"></span>
                                                <span class="slds-checkbox_on">Yes</span>
                                                <span class="slds-checkbox_off">No</span>
                                            </span>
                                        </label>
                                    </div>
                                </div>
                            </apex:outputPanel>

                            <div class="slds-form-element slds-is-relative" id="isIncrementalBackup" data-read-only-editable="false">
                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground slds-hide" id="incrementalBackup_help" aria-hidden="true">
                                    <div class="slds-popover__body slds-text-align_left">
                                        When this feature is enabled, the Scheduled Process will backup only records that have changed since the last time this Scheduled Process ran successfully.
                                        <span data-multi="false">
                                            <br/>The GRAX Data Records will not be deleted which will cause an increase in data storage within your environment.
                                        </span>
                                    </div>
                                </div>
                                <div style="display:inline-block">
                                    <button class="slds-button slds-button_icon slds-button slds-button_icon" style="float:right;font-size:.75rem;line-height:1.5;" id="incrementalBackup_help_button" title="Help">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text">Help</span>
                                    </button>
                                    <label class="slds-checkbox_toggle">
                                        <span class="slds-form-element__label slds-m-bottom_none">Incremental Backup</span>
                                        <apex:inputCheckbox id="progressive" value="{!progressive}"/>
                                        <span class="slds-checkbox_faux_container" aria-live="assertive">
                                            <span class="slds-checkbox_faux"></span>
                                            <span class="slds-checkbox_on">Yes</span>
                                            <span class="slds-checkbox_off">No</span>
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <div class="slds-form-element slds-is-relative" id="isSendNotifications" data-read-only-editable="true">
                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground slds-hide" id="incrementalBackup_help" aria-hidden="true">
                                    <div class="slds-popover__body slds-text-align_left"></div>
                                </div>
                                <div style="display:inline-block">
                                    <label class="slds-checkbox_toggle">
                                        <span class="slds-form-element__label slds-m-bottom_none">Notify User via Email when Process Completes</span>
                                        <apex:inputCheckbox id="sendNotifications" value="{!isSendNotifications}"/>
                                        <span class="slds-checkbox_faux_container" aria-live="assertive">
                                            <span class="slds-checkbox_faux"></span>
                                            <span class="slds-checkbox_on">Yes</span>
                                            <span class="slds-checkbox_off">No</span>
                                        </span>
                                    </label>
                                </div>
                            </div>

                            <div class="slds-form-element slds-is-relative" id="isRollingDate" data-read-only-editable="false">
                                <div class="slds-popover slds-popover_tooltip slds-nubbin_bottom-left slds-rise-from-ground slds-hide" id="rollingDate_help" aria-hidden="true">
                                    <div class="slds-popover__body slds-text-align_left">
                                        When this feature is enabled, the Start/End Dates will update based on your selected schedule.
                                    </div>
                                </div>
                                <div style="display:inline-block">
                                    <button class="slds-button slds-button_icon slds-button slds-button_icon" style="float:right;font-size:.75rem;line-height:1.5;" id="rollingDate_help_button" title="Help">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text">Help</span>
                                    </button>
                                    <label class="slds-checkbox_toggle">
                                        <span class="slds-form-element__label slds-m-bottom_none">Rolling Date</span>
                                        <apex:inputCheckbox id="rollingDate" value="{!isRollingDate}"/>
                                        <span class="slds-checkbox_faux_container" aria-live="assertive">
                                            <span class="slds-checkbox_faux"></span>
                                            <span class="slds-checkbox_on">Yes</span>
                                            <span class="slds-checkbox_off">No</span>
                                        </span>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="slds-section slds-p-top_large slds-hide" id="EmailSection">
                        <h3 class="slds-section__title">
                            <button aria-controls="section-EmailSection" aria-expanded="false" class="slds-button slds-section__title-action">
                                <i class="slds-section__title-action-icon slds-button__icon slds-button__icon_left" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#switch')}"></i>
                                <span class="slds-truncate" title="Notify Additional Users">Notify Additional Users</span>
                            </button>
                        </h3>
                        <div aria-hidden="true" class="slds-section__content" id="section-EmailSection">
                            <div class="slds-is-relative slds-p-bottom_small">
                                <div id="UsersSelection">
                                    
                                    <div class="slds-form-element" >
                                        <label class="slds-form-element__label" for="combobox-users">Users</label>
                                        <div clas="slds-form-element__control">
                                            <div class="slds-combobox_container">
                                                <div class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click" aria-expanded="false" aria-haspopup="listbox" role="combobox">
                                                    <div class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                                                        <input id="selectedUsers" type="hidden" />
                                                        <input type="text" class="slds-input slds-combobox__input" id="combobox-users" aria-autocomplete="list" aria-controls="listbox-users" autoComplete="off" role="textbox" placeholder="Search..." />
                                                            <span class="slds-icon_container slds-icon-utility-search slds-input__icon slds-input__icon_right">
                                                            <i data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#search')}" class="slds-button__icon"></i>
                                                        </span>
                                                    </div>
                                                    <div id="listbox-users" class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid" role="listbox">
                                                        <ul class="slds-listbox slds-listbox_vertical" role="presentation"></ul>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="slds-listbox_selection-group" style="height: auto;">
                                                <ul id="selectedUsersPills" class="slds-listbox slds-listbox_horizontal" role="listbox" aria-label="Selected Items:" aria-orientation="horizontal"></ul>
                                            </div>

                                        </div>
                                    </div>

                                </div>

                                <div class="slds-form-element slds-p-top_small">
                                    <label class="slds-form-element__label" for="extraEmails">Additional Emails</label>
                                    <button class="slds-button slds-button_icon slds-button slds-button_icon" aria-describedby="extraMails_help" title="Help">
                                        <i class="slds-button__icon" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#info')}"></i>
                                        <span class="slds-assistive-text">Help</span>
                                    </button>
                                    <div class="slds-form-element__control">
                                        <apex:inputTextarea id="extraEmails" value="{!extraEmails}" cols="100" rows="3" styleClass="slds-input"/>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="slds-section slds-p-top_large slds-is-open slds-hide" id="ParentsSection" data-multi="false">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title=""></span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content">
                            <table class="slds-table slds-table_bordered slds-table_resizable-cols slds-table_fixed-layout" role="grid">
                                <thead>
                                    <tr class="slds-line-height_reset">
                                        <th style="width: 3.25rem;" class="slds-text-align_right" scope="col">
                                            <div class="slds-th__action slds-th__action_form">
                                                <span class="slds-checkbox">
                                                    <input id="ParentsSelectionAll" tabindex="-1" aria-labelledby="check-select-all-label check-group-header" type="checkbox" />
                                                    <label class="slds-checkbox__label" for="ParentsSelectionAll" id="check-select-all-label">
                                                        <span class="slds-checkbox_faux"></span>
                                                        <span class="slds-form-element__label slds-assistive-text">Select All</span>
                                                    </label>
                                                </span>
                                            </div>
                                        </th>
                                        <th class="slds-text-title_caps" aria-label="Object Name" scope="col">
                                            <span class="slds-truncate" title="Object Name">Object Name</span>
                                        </th>
                                    </tr>
                                </thead>
                            </table>
                            <div class="slds-is-relative slds-scrollable_y slds-p-bottom_small">
                                <div id="ParentsSelection">
                                    <div class="slds-align_absolute-center" style="height: 4rem;padding-top: 3rem;">
                                        <div role="status" class="slds-spinner slds-spinner_medium slds-spinner_inline" style="">
                                            <span class="slds-assistive-text">Loading</span>
                                            <div class="slds-spinner__dot-a"></div>
                                            <div class="slds-spinner__dot-b"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
    
                    <div class="slds-section slds-is-open slds-p-top_large" id="ObjectHierarchySection" data-multi="false">
                        <h3 class="slds-section__title slds-theme_shade">
                            <span class="slds-truncate slds-p-horizontal_small" title="Object Hierarchy">Object Hierarchy</span>
                        </h3>
                        <div aria-hidden="false" class="slds-section__content slds-is-relative">
                            <div id="ObjectHierarchy"></div>
                        </div>
                    </div>
                </div>

                <footer class="slds-modal__footer slds-is-relative">
                    <button id="saveScheduledProcess" class="slds-button slds-button_brand" disabled="disabled">Save</button>
                    <button id="cancelScheduledProcess" class="slds-button slds-button_neutral">Cancel</button>
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-hide"></div>


        <section id="overrideArchiveModal" role="dialog" tabindex="-1" aria-modal="true" class="slds-modal slds-modal_prompt slds-hide" style="z-index: 9002;">
            <div class="slds-modal__container">
                <header class="slds-modal__header slds-theme_error slds-theme_alert-texture">
                    <button data-toggle="modal" data-target="#restoreToOldVersionModal" class="slds-button slds-button_icon slds-modal__close slds-button_icon-inverse" title="Close">
                        <i class="slds-button__icon slds-button__icon_large" data-icon="{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#close')}"></i>
                        <span class="slds-assistive-text">Close</span>
                    </button>

                    <h2 class="slds-text-heading_medium slds-hyphenate">CAUTION</h2>
                </header>

                <div class="slds-modal__content slds-p-around_medium">
                    <p class="slds-p-bottom_small">GRAX requires you to back up all child objects of the selected parent as these child records will be deleted with the parent. This ensures the child records will be backed up in the archive process, but it also can significantly increase the time it takes for the process to run. If you confirm, the child records in these unchecked objects will be deleted and will NOT be backed up to GRAX.</p>
                    <p class="slds-p-bottom_small">Type CONFIRM in this text box if you still want to proceed.</p>

                    <div class="slds-form-element slds-p-bottom_small">
                        <input type="text" id="overrideArchiveConfirmInput" class="slds-input" />
                    </div>
                </div>

                <footer class="slds-modal__footer">
                    <span class="slds-button slds-button_neutral" data-toggle="modal" data-target="#overrideArchiveModal">Cancel</span>
                    <button id="overrideArchiveConfirmButton" class="slds-button slds-button_destructive" data-toggle="modal" data-target="#overrideArchiveModal" disabled="disabled">Confirm</button>
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-hide" style="z-index: 9001;"></div>


        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="spisactive_help" aria-hidden="true">
            <div class="slds-popover__body">
                A process will not run unless it is active
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="spname_help" aria-hidden="true">
            <div class="slds-popover__body">
                Setting the name of your process is optional and is not required.
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="timerange_help" aria-hidden="true">
            <div class="slds-popover__body">
                This selection will not function as a relative date filter, it is simply to be used as a shortcut for populating the start and end dates.<br />
                If you need relative dates, use reports or the rolling date toggle.
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="timezone_help" aria-hidden="true">
            <div class="slds-popover__body">
                This Scheduled Process will execute based on your current timezone, which is <span class="slds-text-font_monospace">{!userTimeZone}</span>
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="extraMails_help" aria-hidden="true">
            <div class="slds-popover__body">
                Enter up to 250 email addresses. Separate addresses using a ",".
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="frequency_help" aria-hidden="true">
            <div class="slds-popover__body">
                Your GRAX Schedule Job will run every <span class="slds-text-font_monospace _frequencyValue"></span> <span class="slds-text-font_monospace _frequencyType"></span> starting on <span class="slds-text-font_monospace _scheduleStartDate"></span> <span class="slds-text-font_monospace _scheduleStartTime"></span>
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-left slds-rise-from-ground slds-hide" role="tooltip" id="lastModifyDate_help" aria-hidden="true">
            <div class="slds-popover__body">
                Any records from the last modified date entered up until the start date of the process, will be backed up. Leave this field blank if you want to backup all records.
            </div>
        </div>

        <div class="slds-popover slds-popover_tooltip slds-nubbin_top-right slds-rise-from-ground slds-hide" role="tooltip" id="report_help" aria-hidden="true">
            <div class="slds-popover__body">
                1) Ensure the object's ID field is the first column in the report (recommended this is the only column in the report)<br/>
                2) Ensure "GRAX" is in either the report name or the folder name where the report is stored<br/>
                3) We recommend your report contains 250,000 records or less as Salesforce imposes a heap size limit when querying the reports.<br/>
            </div>
        </div>

        <script>
            var $spName = $sf('{!$Component.spName}');
            var $scheduledProcessType = $sf('{!$Component.scheduledProcessType}');
            var $objectList = $('#objectList');
            var $ObjectsSelection = $('#ObjectsSelection');
            var $EmailSection = $('#EmailSection');
            var $ParentsSection = $('#ParentsSection');
            var $ObjectHierarchySection = $('#ObjectHierarchySection');
            var $ParentsSelection = $('#ParentsSelection');
            var $UsersSelection = $('#UsersSelection');
            var $filterCriteriaType = $sf('{!$Component.filterCriteriaType}');
            var $filterCriteriaTypeOptions = $('[name="filterCriteriaTypeOptions"]');
            var $targetDate = $sf('{!$Component.targetDate}');
            var $targetDate_date = $('#targetDate_date');
            var $targetTime = $sf('{!$Component.targetTime}');
            var $targetEndDate = $sf('{!$Component.targetEndDate}');
            var $targetEndDate_date = $('#targetEndDate_date');
            var $targetEndTime = $sf('{!$Component.targetEndTime}');
            var $reportList = $('select#reportList');
            var $targetReport = $sf('{!$Component.targetReport}');
            var $schedule = $sf('{!$Component.schedule}');
            var $scheduleStartDate = $sf('{!$Component.scheduleStartDate}');
            var $scheduleStartDate_date = $('#scheduleStartDate_date');
            var $scheduleStartTime = $sf('{!$Component.scheduleStartTime}');
            var $objectJSON = $sf('{!$Component.objectJSON}');
            var $parentsSelection = $sf('{!$Component.parentsSelection}');
            var $usersSelection = $sf('{!$Component.usersSelection}');
            var $extraEmails = $sf('{!$Component.extraEmails}');
            var $archive = $sf('{!$Component.archive}');
            var $active = $sf('{!$Component.active}');
            var $overrideArchive = $sf('{!$Component.overrideArchive}');
            var $progressive = $sf('{!$Component.progressive}');
            var $sendNotifications = $sf('{!$Component.sendNotifications}');
            var $rollingDate = $sf('{!$Component.rollingDate}');
            var $ObjectHierarchy = $('#ObjectHierarchy');
            var $createScheduledProcess = $('#createScheduledProcess');
            var $createMultiobjectBackup = $('#createMultiobjectBackup');
            var $scheduledProcessModal = $('#scheduledProcessModal');
            var $saveScheduledProcess = $('#saveScheduledProcess');
            var $cancelScheduledProcess = $('#cancelScheduledProcess, #scheduledProcessModal .slds-modal__close');
            var $cancelRenderingObjectHierarchyTree = $('#cancelRenderingObjectHierarchyTree');
            var $globalSpinner = window.$globalSpinner || $('#globalSpinner');
            var $timeSelect = $('.timeSelect');
            var $frequencySection = $('#frequencySection');
            var $frequencyType = $sf('{!$Component.frequencyType}');
            var $frequencyValue = $sf('{!$Component.frequencyValue}');
            var $overrideArchiveModal = $('#overrideArchiveModal');
            var $overrideArchiveConfirmInput = $('#overrideArchiveConfirmInput');
            var $overrideArchiveConfirmButton = $('#overrideArchiveConfirmButton');

            var _reportListRendered = false;
            var _isScheduledProcessMultiple = false;
            var _hasScheduledProcessMultipleSelected = false;

            var _selectedDateFieldType;

            var _contentVersionHierarchyJSON = '{"uniqueKey":"ContentDocumentTmp","parentUniqueKey":null,"relatedFieldName":null,"name":"ContentDocument","tmpRecord":true,"childObjRelStructure":[{"uniqueKey":"ContentDocument_ContentDocumentLinksTmp","parentUniqueKey":"ContentDocumentTmp","relatedFieldName":"ContentDocumentId","name":"ContentDocumentLink","childObjRelStructure":[]}]}';

            var selectFilterCriteriaTypeOption = function(value, isEvent) {
                if(!isEvent) {
                    $filterCriteriaTypeOptions.filter(':checked').prop('checked', false);
                    $filterCriteriaTypeOptions.filter('[value="' + value + '"]').prop('checked', true);
                } else {
                    if(value == 'Report' && !_reportListRendered) {
                        showGlobalSpinner(true);
                        reRenderReportPicklist();

                        _reportListRendered = true;
                    }
                }
                $('[data-filterCriteriaType]').addClass('slds-hide');
                $('[data-filterCriteriaType="' + value + '"]').removeClass('slds-hide');
                $filterCriteriaType.val(value);
            };

            $(document).on('change', '.sObjectDateFieldsList', function(e) {
                if(getDateFieldType(e.target.value) == 'datetime' || _isScheduledProcessMultiple) {
                    $timeSelect.removeClass('slds-hide');
                    $targetTime.prop('selectedIndex', 0);
                    $targetEndTime.prop('selectedIndex', 0);
                } else {
                    $timeSelect.addClass('slds-hide');
                    $targetTime.prop('selectedIndex', -1);
                    $targetEndTime.prop('selectedIndex', -1);
                }
            });

            var selectReport = function(value) {
                $targetReport.val(value).trigger('change');

                if(value) {
                    if(!_reportListRendered) reRenderReportPicklist();

                    $reportList.val(value);
                } else {
                    $reportList.get(0).selectedIndex = 0;
                }
            };

            window.setReportPicklist = function() {
                $reportList.val($targetReport.val());

                showGlobalSpinner(false);
            };
        </script>

        <apex:outputPanel id="dateTimeFieldTypes" layout="block">
            <script>
                var dateFieldVsType = {!dateFieldsVsTypeJSON};

                var getDateFieldType = function(fieldName) {
                    return dateFieldVsType[fieldName];
                }

                if($objectList.val()) {
                    $('.sObjectDateFieldsList').trigger('change');
                }
            </script>
        </apex:outputPanel>

        <apex:outputPanel id="relStructureOutput" layout="block">
            <script>
                var getRelStructure = function() {
                    return {!RelStructure};
                };

                var renderObjectHierarchy = function() {
                    if('{!selectedObject}') addChildsToRelStructure(getRelStructure());
                };

                var getItemsMultiObjectJSON = function() {
                    return {!itemsMultiObjectJSON};
                };

                var renderObjectsSelection = function() {
                    window.ObjectsSelection(getItemsMultiObjectJSON());
                };

                var renderParentsSelection = function() {
                    window.ParentsSelection(getItemsMultiObjectJSON());
                };
            </script>
        </apex:outputPanel>

        <apex:outputPanel id="initializeUsersPicklist" layout="block">
            <script>
                window._initializeUsersPicklist = function() {
                    renderUsersCombobox({!usersJSON});
                };
            </script>
        </apex:outputPanel>

        <script>
            window.renderUsersSelection = function() {
                initializeUsersPicklist();
            };
        </script>

        <apex:outputPanel id="fillInputs">
            <script>
                var fillForm = function() {
                    if(pageAlertMessage) return;

                    $spName.val('{!spName}');

                    var selectedObject = '{!selectedObject}';
                    var targetReport = '{!targetReport}';

                    $("#colDt_q").val('today').trigger('change');

                    var scheduledProcessType = '{!scheduledProcessType}';

                    $objectList.val(!selectedObject ? null : selectedObject);
                    selectReport(!targetReport ? null : targetReport);

                    var isActive = {!active};
                    $active.prop('checked', isActive).trigger('change');

                    var schedule = '{!schedule}';

                    $schedule.val(schedule).trigger('change');

                    if(schedule == 'Custom') {
                        $frequencyType.val('{!frequencyType}');
                        $frequencyValue.val('{!frequencyValue}');
                    }

                    var sObjectDateFieldsListValue = '{!sObjectDateField}' || '{!sObjectDateFieldDefault}';
                    $('.sObjectDateFieldsList')
                        .prop('disabled', !selectedObject)
                        .val(sObjectDateFieldsListValue)
                        .trigger('change');

                    var targetDate = '{!targetDate}';
                    var targetTime = '{!targetTime}';
                    var targetEndDate = '{!targetEndDate}';
                    var targetEndTime = '{!targetEndTime}';

                    if(targetDate) {
                        $targetDate_date.datepicker('setDate', selectedObject ? moment(targetDate, 'MM/DD/YYYY') : moment()).trigger('change');
                    } else {
                        $targetDate_date.datepicker('setSelectedFullDate', null).trigger('change');
                    }

                    $targetTime.prop('selectedIndex', -1);
                    if(targetTime) {
                        $targetTime.prop('selectedIndex', 0);
                        $targetTime.val(targetTime + ':00');
                    }

                    if(targetEndDate) {
                        $targetEndDate_date.datepicker('setDate', targetEndDate).trigger('change');
                    } else {
                        $targetEndDate_date.datepicker('setSelectedFullDate', null).trigger('change');
                    }

                    $targetEndTime.prop('selectedIndex', -1);
                    if(targetEndTime) {
                        $targetEndTime.prop('selectedIndex', 0);
                        $targetEndTime.val(targetEndTime + ':00');
                    }

                    var scheduleStartDate = '{!scheduleStartDate}';

                    $scheduleStartDate_date.datepicker('setSelectedFullDate', null).trigger('change');
                    if(scheduleStartDate) {
                        $scheduleStartDate_date.datepicker('setDate', selectedObject ? moment(scheduleStartDate, 'MM/DD/YYYY') : moment()).trigger('change');
                    } else {
                        $scheduleStartDate_date.datepicker('setDate', moment().add(1, 'days')).trigger('change');
                    }
                    
                    if(selectedObject) $scheduleStartTime.val('{!scheduleStartTime}:00');

                    if(selectedObject == 'ContentVersion') {
                        $objectJSON.val(_contentVersionHierarchyJSON);
                    } else {
                        $objectJSON.val('{!objectJSON}');
                    }

                    var isProgressive = {!progressive};
                    var isArchive = {!archive};
                    var isOverrideArchive = {!overrideArchive};
                    $archive.prop('checked', !isProgressive && isArchive).prop('disabled', isProgressive || {!!gp.ifHasBackupArchivePermission});
                    disableNextStartDate(isActive);


                    $overrideArchive.prop('checked', isArchive && isOverrideArchive).prop('disabled', {!!gp.ifHasOverrideArchivePermission} || !isArchive);
                    $overrideArchiveConfirmInput.val(isOverrideArchive ? 'CONFIRM' : '');
                    $progressive.prop('checked', isProgressive);
                    $sendNotifications.prop('checked', {!isSendNotifications}).trigger('change');
                    $rollingDate.prop('checked', {!isRollingDate}).trigger('change');

                    $("#colDt_q").val(selectedObject ? 'custom' : 'today').trigger('change');
                
                    $('[name="criteriaOptions"], [name="scheduleOptions"]').prop('checked', false);

                    var criteriaType = '{!filterCriteriaType}'; var criteria = '{!criteria}'; var schedule = '{!schedule}';
                    if(criteria) $('[name="criteriaOptions"][value="' + criteria + '"]').prop('checked', true);
                    if(schedule) $('[name="scheduleOptions"][value="' + schedule + '"]').prop('checked', true);

                    selectFilterCriteriaTypeOption(!criteriaType ? 'Date' : criteriaType);

                    $parentsSelection.val('{!parentsSelection}');
                    $usersSelection.val('{!usersSelection}');
                    $extraEmails.val('{!extraEmails}');

                    renderUsersSelection();

                    if(scheduledProcessType == 'Hierarchy') {
                        renderParentsSelection();
                        renderObjectHierarchy();
                    }

                    if(scheduledProcessType == 'Multi-Object') {
                        $timeSelect.removeClass('slds-hide');
                        renderObjectsSelection();
                    }

                    $scheduledProcessModal.toggleClass('isReadOnly', {!isReadOnly});
                };
            </script>
        </apex:outputPanel>
    </apex:form>

    <div id="relStructureLoadProgress" style="
        position: fixed;
        top: 20%;
        bottom: 0;
        margin: auto;
        z-index: 99999;
        text-align: center;
        display: inline-block;
        height: 1.5rem;
        left: 0;
        right: 0;
    " class="slds-hide">
        Loading Object Hierarchy Tree <span id="relStructureLoadProgressPercentage">0</span>%
    </div>

    <div id="relStructureRenderProgress" style="
        position: fixed;
        top: 20%;
        bottom: 0;
        margin: auto;
        z-index: 99999;
        text-align: center;
        display: inline-block;
        height: 1.5rem;
        left: 0;
        right: 0;
    " class="slds-hide">
        Rendering Object Hierarchy Tree <span id="relStructureRenderProgressItems">0</span> of <span id="relStructureRenderProgressItemsTotal">0</span> items <br/>
        <button id="cancelRenderingObjectHierarchyTree" class="slds-button slds-button_neutral" onclick="window.relStructureLoadProgressCancel = true; return false;" >Cancel</button>
    </div>

    <script>
        function disableNextStartDate(isActive) {
            if(isActive) {
                    var tomorrow = new Date();
                    tomorrow.setDate(tomorrow.getDate() + 1);
                    $scheduleStartDate_date.datepicker({dateFormat: 'mm/dd/yyyy'}).datepicker('setDate', tomorrow);
                    $scheduleStartTime.val("00:00");
                    $scheduleStartTime.prop("disabled", false);
                    $scheduleStartDate_date.prop("disabled", false);
                }
                else {
                    $scheduleStartDate_date.val('');
                    $scheduleStartTime.val('');
                    $scheduleStartTime.prop("disabled", true);
                    $scheduleStartDate_date.prop("disabled", true);
            }
        }
        
        $(function() {
            
            $active.on("change", function() {
                disableNextStartDate($active.is(":checked"));
            });
            $relStructureLoadProgress = $('#relStructureLoadProgress');
            var $relStructureLoadProgressPercentage = $('#relStructureLoadProgressPercentage');

            var $relStructureRenderProgress = $('#relStructureRenderProgress');
            var $relStructureRenderProgressItemsTotal = $('#relStructureRenderProgressItemsTotal');
            var $relStructureRenderProgressItems = $('#relStructureRenderProgressItems');
            window.relStructureLoadProgressCancel = false;
            
            var sfId = function(id) {
                return id.split(':').join('\\:');
            };

            var replaceDatePickerArrows = function($datepicker) {
                $('#aljs-prevButton').html('&#9666;');
                $('#aljs-nextButton').html('&#9656;');
            };

            $targetDate_date.datepicker({
                initDate: moment(),
                format: 'L',
                onSelect: function(x, val) {
                    $targetDate_date.trigger('change');

                    $('#colDt_q').val('custom');
                    updateSaveState();
                },
                onShow: replaceDatePickerArrows
            }).on('change', function(e) {
                if(e.target.value) {
                    var m = moment(e.target.value, 'L');
                    if(m._isValid) {
                        $targetDate.val(m.format('MM/DD/YYYY'));
                    }
                } else {
                    $targetDate.val(null);
                }
            }).on('input', function() {
                $('#colDt_q').val('custom');
            });

            $targetEndDate_date.datepicker({
                initDate: moment(),
                format: 'L',
                onSelect: function(x, val) {
                    $targetEndDate_date.trigger('change');

                    $('#colDt_q').val('custom');
                    updateSaveState();
                },
                onShow: replaceDatePickerArrows
            }).on('change', function(e) {
                if(e.target.value) {
                    var m = moment(e.target.value, 'L');
                    if(m._isValid) {
                        $targetEndDate.val(m.format('MM/DD/YYYY'));
                    }
                } else {
                    $targetEndDate.val(null);
                }
            }).on('input', function() {
                $('#colDt_q').val('custom');
            });

            $scheduleStartDate_date.datepicker({
                initDate: moment().add(1, 'days'),
                format: 'L',
                onShow: replaceDatePickerArrows,
                onSelect: function(x, val) {
                    $scheduleStartDate_date.trigger('change');
                }
            }).on('change', function(e) {
                if(e.target.value) {
                    var m = moment(e.target.value, 'L');
                    if(m._isValid) {
                        $scheduleStartDate.val(m.format('MM/DD/YYYY'));
                    }
                } else {
                    $scheduleStartDate.val(null);
                }

                $('._scheduleStartDate').text($scheduleStartDate.val());
            });

            window.radioChange = function(input, hiddenId) {
                $(document.getElementById(hiddenId)).val(input.value).trigger('change');
            };


            $scheduleStartTime.removeAttr('size');
            $timeSelect.find('select').removeAttr('size');
            $('.sObjectDateFieldsList').prop('disabled', true);
            $frequencyType.removeAttr('size');
            $frequencyValue.attr('size', 8);
            $frequencyValue.prop('type', 'number');
            $frequencyValue.css('padding-right', 0);
            
            var $filterCriteriaTypeReport = $('#filterCriteriaTypeReport');

            window.updateSaveState = function() {
                var condition = false;

                var selectedObject = $objectList.val();
                var isArchive = $archive.prop('checked');

                if(['Attachment', 'ContentVersion'].indexOf(selectedObject) !== -1) {
                    var sectionTitle = 'Select Object(s) with related ' + selectedObject + ' record(s)';

                    $ParentsSection.find('.slds-section__title span.slds-truncate')
                        .attr({
                            title: sectionTitle
                        })
                        .text(sectionTitle);

                    $ParentsSection.removeClass('slds-hide');
                    $ObjectHierarchySection.addClass('slds-hide');
                    $filterCriteriaTypeReport.prop('disabled', true);
                    selectFilterCriteriaTypeOption('Date');
                } else {
                    $ParentsSection.addClass('slds-hide');
                    $ObjectHierarchySection.removeClass('slds-hide');
                    $filterCriteriaTypeReport.prop('disabled', false);
                }

                if(!_hasScheduledProcessMultipleSelected) {
                    condition = selectedObject != null;

                    if($filterCriteriaType.val() == 'Date') {
                        var targetDate = $targetDate.val();
                        var targetEndDate = $targetEndDate.val();
                        var m_targetDate = moment(targetDate);
                        var m_targetEndDate = moment(targetEndDate);

                        condition = condition && (
                            (targetDate != '' && targetEndDate != '' && m_targetDate.isValid() && m_targetEndDate.isValid())
                            || (targetDate != '' && targetEndDate == '' && m_targetDate.isValid())
                            || (targetEndDate != '' && targetDate == '' && m_targetEndDate.isValid())
                        );
                    } else if($filterCriteriaType.val() == 'Report') {
                        condition = condition && $reportList.val() && $targetReport.val() != '';
                    } else {
                        condition = false;
                    }

                    // condition = condition && $scheduleStartDate.val() != '';
                    condition = condition && $('[name="criteriaOptions"]:checked').length == 1;
                } else {
                    condition = _hasScheduledProcessMultipleSelected;
                }
                
                if($active.prop('checked')) {
                    condition = condition && $('[name="scheduleOptions"]:checked').length == 1;
                }

                $saveScheduledProcess.prop('disabled', !condition);
            };

            $('#modal-content-ScheduledProcess').on('change', 'input, select', updateSaveState);

            
            var cleanForm = function() {
                cleanFormData();

                //_isScheduledProcessMultiple = false;
                _hasScheduledProcessMultipleSelected = false;

                $spName.val(null);
                $objectList.val(null);
                selectReport(null);
                $schedule.val(null).trigger('change');
                $("#colDt_q").val('today').trigger('change');
                $targetDate.val(null);
                $targetDate_date.datepicker('setDate', moment()).trigger('change');
                $targetEndDate.val(null);
                $targetEndDate_date.datepicker('setSelectedFullDate', null).trigger('change');
                $targetTime.prop('selectedIndex', 0);
                $targetEndTime.prop('selectedIndex', 0);
                $scheduleStartDate.val(null);
                $scheduleStartDate_date.datepicker('setDate', moment().add(1, 'days')).trigger('change');
                $scheduleStartTime.val(null);
                $objectJSON.val(null);
                $parentsSelection.val(null);
                $usersSelection.val(null);
                $extraEmails.val(null);
                $progressive.prop('checked', false);
                $archive.prop('checked', false);
                $active.prop('checked', true).trigger('change');
                $overrideArchive.prop('checked', false);
                $overrideArchiveConfirmInput.val('');
                $sendNotifications.prop('checked', false);
                $rollingDate.prop('checked', false).trigger('change');

                $frequencySection.addClass('slds-hide');
                $frequencyType.prop('selectedIndex', 0);
                $frequencyValue.val(null);

                $scheduleStartTime.prop('selectedIndex', 0);
                $ObjectHierarchy.html(null);
                $ParentsSelection.html(null);
                $('.sObjectDateFieldsList').prop('disabled', true).val(null).trigger('change');

                $("#colDt_q").val('today').trigger('change');
            
                $('[name="scheduleOptions"]').prop('checked', false);

                var criteria = 'Main Object not modified';
                $('[name="criteriaOptions"][value="' + criteria + '"]').prop('checked', true);
                selectFilterCriteriaTypeOption('Date');

                renderParentsSelection();
                renderUsersSelection();
            };
            
            
            $createScheduledProcess.on('click', function(e) {
                $scheduledProcessModal.removeClass('isReadOnly');

                _isScheduledProcessMultiple = false;
                showScheduledProcessModal(true);

                disableNextStartDate($active.is(":checked"));

                e.preventDefault();
            });

            $createMultiobjectBackup.on('click', function(e) {
                $scheduledProcessModal.removeClass('isReadOnly');

                _isScheduledProcessMultiple = true;
                showScheduledProcessModal(true);

                disableNextStartDate($active.is(":checked"));

                $targetDate_date.datepicker('setSelectedFullDate', null).trigger('change');
                $targetEndDate_date.datepicker('setSelectedFullDate', null).trigger('change');

                renderObjectsSelection();

                e.preventDefault();
            });

            $saveScheduledProcess.on('click', function(e) {
            	
                showGlobalSpinner(true);
                saveScheduledProcess();

                e.preventDefault();
            });

            $cancelScheduledProcess.on('click', function(e) {
                showScheduledProcessModal(false);

                e.preventDefault();
            });
                        
            $filterCriteriaTypeOptions.on('change', function(e) {
                selectFilterCriteriaTypeOption(e.target.value, true);
            });

            $progressive.on('change', function(e) {
                if(e.target.checked) {
                    $archive.prop('checked', false);
                }

                $archive.prop('disabled', e.target.checked || {!!gp.ifHasBackupArchivePermission});
                setRollingDateDisabled(e.target.checked);
            });

            var setProgressiveDisabled = function(isProgressiveDisabled) {
                $progressive.prop('disabled', isProgressiveDisabled);

                if(isProgressiveDisabled) {
                    $progressive.prop('checked', false);
                }

                $progressive.trigger('change');
            }

            var setRollingDateDisabled = function(isRollingDateDisabled) {
                $rollingDate.prop('disabled', isRollingDateDisabled);

                if(isRollingDateDisabled) {
                    $rollingDate.prop('checked', false);
                }

                $rollingDate.trigger('change', [true]);
            }

            $archive.on('change', function(e) {
                if(e.target.checked) {
                    $progressive.prop('checked', false);
                }

                setProgressiveDisabled(e.target.checked);

                $overrideArchive.prop('disabled', !e.target.checked);
            });

            $overrideArchive.on('click', function(e) {
                if(String($overrideArchiveConfirmInput.val()).toUpperCase() !== 'CONFIRM') {
                    $overrideArchiveConfirmInput.val('');
                    $overrideArchiveModal.trigger('modaltoggle', [true]);

                    $overrideArchive.prop('checked', false);
                    
                    e.preventDefault();
                    e.stopPropagation();

                    return false;
                }
            }).on('change', function(e) {
                $overrideArchive.trigger('toggleCascadeDelete');
            });

            $overrideArchiveConfirmInput.on('input', function(e) {
                $overrideArchiveConfirmButton.prop('disabled', String(e.target.value).toUpperCase() !== 'CONFIRM');
            });

            $overrideArchiveConfirmButton.on('click', function(e) {
                var isOverrideArchive = String($overrideArchiveConfirmInput.val()).toUpperCase() === 'CONFIRM';

                $overrideArchive.prop('checked', isOverrideArchive);

                if(isOverrideArchive) {
                    $overrideArchive.trigger('change');
                }

                e.preventDefault();
            });

            $schedule.on('change', function(e) {
                if(e.target.value == 'Custom') {
                    $frequencySection.removeClass('slds-hide');
                } else {
                    $frequencySection.addClass('slds-hide');
                }

                setProgressiveDisabled(e.target.value == 'Once' || $archive.prop('checked'));
                setRollingDateDisabled(e.target.value == 'Once' || $progressive.prop('checked'));
            });

            var $scheduleOnce = $('#scheduleOnce');
            var $scheduleDaily = $('#scheduleDaily');

            $rollingDate.on('change', function(e, skipEvent) {
                if(skipEvent) return;

                if(e.target.checked) {
                    $progressive.prop('checked', false);

                    $scheduleDaily.prop('checked', $scheduleOnce.prop('checked') || $scheduleDaily.prop('checked'));                    
                }

                $scheduleOnce.prop('disabled', e.target.checked);

                setProgressiveDisabled(e.target.checked);
            });

            $frequencyValue.on('input', function(e) {
                $('._frequencyValue').text(e.target.value);
            });

            $frequencyType.on('change', function(e) {
                $('._frequencyType').text(e.target.value);
            }).trigger('change');

            $scheduleStartDate.on('input', function(e) {
                $('._scheduleStartDate').text(e.target.value || '00/00/0000');
            }).trigger('input');

            $scheduleStartTime.on('input', function(e) {
                $('._scheduleStartTime').text(
                    $(e.target).find(':selected').prop('label') || '12 AM'
                );
            }).trigger('input');

            $sendNotifications.on('change', function(e) {
                if(e.target.checked) {
                    $EmailSection.removeClass('slds-hide');
                } else {
                    $EmailSection.addClass('slds-hide');
                }
            });
            
            // Tree

            $objectList.on('change', function(e) {
                $objectJSON.val(null);
                showGlobalSpinner($objectList.val() != null);
            });

            var getSelectedItems = function(settings, items) {
                var fields = ['uniqueKey', 'parentUniqueKey', 'relatedFieldName', 'name'];
                var _items = [];

                $.each(items, function(i, item) {
                    if(item.isSelected) {
                        var _item = {};

                        $.each(fields, function(i, field) {
                            _item[field] = item[field];
                        });

                        _item[settings.items.childs] = getSelectedItems(settings, item[settings.items.childs]);

                        _items.push(_item);
                    }
                });

                return _items;
            }

            var callAsync = function(fn, delay) {
                showGlobalSpinner(true);
                setTimeout(function() {
                    fn();

                    showGlobalSpinner(false);
                }, 100 || delay);
            };

            var callNested = function(settings, items, fn, parent) {
                $.each(items, function(i, item) {
                    // callAsync(function() {
                        fn(item, parent);

                        if(item[settings.items.childs]) {
                            callNested(settings, item[settings.items.childs], fn, item);
                        }
                    // }, 100);
                });
            };

            var mergeObjectsSelection = function(a, b) {
                if(a.uniqueKey != b.uniqueKey) return;

                $.each(b, function(bkey, bval) {
                    // callAsync(function() {
                        if(bkey == 'uniqueKey') {
                            a.isSelected = true;
                        }

                        if(bkey == 'childObjRelStructure') {
                            $.each(bval, function(bi, bitem) {
                                // callAsync(function() {
                                    if(a[bkey]) {
                                        $.each(a[bkey], function(ai, aitem) {
                                            // callAsync(function() {
                                                if(bitem.uniqueKey == aitem.uniqueKey) {
                                                    mergeObjectsSelection(aitem, bitem);
                                                }
                                            // });
                                        });
                                    }
                                // });
                            });
                        }
                    // });
                });
            };

            var mergeParentObjectsSelection = function(a, b) {
                $.each(a, function(ai, aitem) {
                    // callAsync(function() {
                        $.each(b, function(bi, bitem) {
                            // callAsync(function() {
                                if(aitem['uniqueKey'] == bitem['uniqueKey']) {
                                    aitem.isSelected = true;
                                    _hasScheduledProcessMultipleSelected = true;
                                }
                            // });
                        });
                    // });
                });
            };

            var setCascadeDeleteParents = function(settings, items) {
                var hasCascadeDelete = function(item) {
                    var isCascadeDelete = false;

                    if(!isCascadeDelete) {
                        $.each(item[settings.items.childs], function(i, item) {
                            isCascadeDelete = item.isCascadeDelete;

                            if(isCascadeDelete) return;
                        });
                    }

                    if(!isCascadeDelete) {
                        $.each(item[settings.items.childs], function(i, item) {
                            isCascadeDelete = hasCascadeDelete(item);

                            if(isCascadeDelete) return;
                        });
                    }

                    return isCascadeDelete;
                };

                callNested(settings, items, function(item) {
                    if(item[settings.items.childs] && item[settings.items.childs].length > 0 && !item.isCascadeDelete) {
                        item.isCascadeDelete = hasCascadeDelete(item);
                    }
                });
            };

            var hasItem = function(items, fn) {
                for (var i = 0; i < items.length; i++) {
                    if (fn(items[i], i)) return true;
                }

                return false;
            };

            window.ObjectsSelection = function(objects) {
                _hasScheduledProcessMultipleSelected = false;

                if(objects.length == 0) return;

                showGlobalSpinner(true);

                var selection = null;

                try {
                    selection = $.parseJSON($('[data-id="objectJSON"]').val());
                } catch(e) {}

                if(selection != null) {
                    mergeParentObjectsSelection(objects, selection);
                }

                var itemIndex = 0;
                var unixNow = String(moment().unix());

                $ObjectsSelection.sldsTree({
                    data: objects,
                    items: {
                        id: 'uniqueKey',
                        childs: 'childObjRelStructure',
                        label: 'name'
                    },
                    attrs: {
                        root: {'class': ''},
                        button: {'class': 'slds-hide'},
                        li: {'class': 'slds-border_bottom'}
                    },
                    expandIcon: {
                        path: "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#chevronright')}"
                    },
                    onStart: function($root, items, settings, callback) {
                        showGlobalSpinner(true);

                        callback($root);
                    },
                    onDiv: function($div, item, settings, callback) {
                        item._domId = '_multiObject_' + item[settings.items.id] + '_' + unixNow + '_i' + itemIndex;

                        $div.append('<div class="slds-size_1-of-1 slds-m-left_small">\
                        <div class="slds-form-element">\
                            <div class="slds-form-element__control">\
                                <span class="slds-checkbox">\
                                <input name="' + item._domId + '" id="' + item._domId + '" type="checkbox" ' + (item.isSelected ? 'checked' : '') + ' />\
                                <label class="slds-checkbox__label" for="' + item._domId + '" style="display: block;">\
                                    <span class="slds-checkbox_faux"></span>\
                                    <span class="slds-form-element__label">' + item[settings.items.id] + '</span>\
                                </label>\
                                </span>\
                            </div>\
                            </div>\
                        </div>');

                        itemIndex++;

                        callback($div);
                    },
                    onUl: function($ul, items, settings, callback) {
                        $ul = $ul.replaceWith('<tbody>');

                        callback($ul);
                    },
                    onFinish: function($root, items, settings, callback) {
                        var $ObjectsSelectionAll = $('#ObjectsSelectionAll');

                        $ObjectsSelectionAll.prop('checked', false);
                        $ObjectsSelectionAll.prop('indeterminate', false);

                        var hasItemSelected = function() {
                            return hasItem(items, function(item, i) {
                                return item.isSelected;
                            });
                        };

                        var setObjectsJSON = function() {
                            var selectedItems = getSelectedItems(settings, items);

                            _hasScheduledProcessMultipleSelected = hasItemSelected();

                            return $objectJSON.val(JSON.stringify(selectedItems));
                        };

                        callNested(settings, items, function(item, parent) {
                            $root.find('#' + item._domId).on('change', function(e) {
                                item.isSelected = e.target.checked;

                                $ObjectsSelectionAll.prop('indeterminate', true);

                                setObjectsJSON();
                            });
                        });

                        $ObjectsSelectionAll.off('change').on('change', function(e) {                            
                            callNested(settings, items, function(item, parent) {
                                item.isSelected = e.target.checked;

                                $root.find('#' + item._domId).prop('checked', item.isSelected);
                            });

                            setObjectsJSON();
                        });

                        showGlobalSpinner(false);
                        showGlobalSpinner(false);

                        callback($root);
                    }
                });

                showGlobalSpinner(false);
            };

            var _hasScheduledProcessParentSelected;
            window.ParentsSelection = function(objects) {
                _hasScheduledProcessParentSelected = false;

                if(objects.length == 0) return;

                showGlobalSpinner(true);

                $.each(objects, function(item, i) {
                    item.isSelected = false;
                });

                var selection = null;

                try {
                    selection = $.parseJSON($('[data-id="parentsSelection"]').val());
                } catch(e) {}

                if(selection != null) {
                    mergeParentObjectsSelection(objects, $.map(selection, function(name, i) {
                        return {
                            uniqueKey: name,
                            name: name,
                            parentUniqueKey: null,
                            relatedFieldName: null,
                            childObjRelStructure: []
                        };
                    }));
                }

                var itemIndex = 0;
                var unixNow = String(moment().unix());

                $ParentsSelection.sldsTree({
                    data: objects,
                    items: {
                        id: 'uniqueKey',
                        childs: 'childObjRelStructure',
                        label: 'name'
                    },
                    attrs: {
                        root: {'class': ''},
                        button: {'class': 'slds-hide'},
                        li: {'class': 'slds-border_bottom'}
                    },
                    expandIcon: {
                        path: "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#chevronright')}"
                    },
                    onStart: function($root, items, settings, callback) {
                        showGlobalSpinner(true);

                        callback($root);
                    },
                    onDiv: function($div, item, settings, callback) {
                        item._domId = '_parent_' + item[settings.items.id] + '_' + unixNow + '_i' + itemIndex;

                        $div.append('<div class="slds-size_1-of-1 slds-m-left_small">\
                        <div class="slds-form-element">\
                            <div class="slds-form-element__control">\
                                <span class="slds-checkbox">\
                                <input name="' + item._domId + '" id="' + item._domId + '" type="checkbox" ' + (item.isSelected ? 'checked' : '') + ' />\
                                <label class="slds-checkbox__label" for="' + item._domId + '" style="display: block;">\
                                    <span class="slds-checkbox_faux"></span>\
                                    <span class="slds-form-element__label">' + item[settings.items.label] + '</span>\
                                </label>\
                                </span>\
                            </div>\
                            </div>\
                        </div>');

                        itemIndex++;

                        callback($div);
                    },
                    onUl: function($ul, items, settings, callback) {
                        $ul = $ul.replaceWith('<tbody>');

                        callback($ul);
                    },
                    onFinish: function($root, items, settings, callback) {
                        var $ParentsSelectionAll = $('#ParentsSelectionAll');

                        $ParentsSelectionAll.prop('checked', false);

                        var hasItemSelected = function() {
                            return hasItem(items, function(item, i) {
                                return item.isSelected;
                            });
                        };

                        var setObjectsJSON = function() {
                            var selectedItems = getSelectedItems(settings, items);

                            selectedItems = $.map(selectedItems, function(item, i) {
                                return item.name;
                            });

                            _hasScheduledProcessParentSelected = hasItemSelected();

                            return $parentsSelection.val(JSON.stringify(selectedItems));
                        };

                        callNested(settings, items, function(item, parent) {
                            $root.find('#' + item._domId).on('change', function(e) {
                                item.isSelected = e.target.checked;

                                $ParentsSelectionAll.prop('indeterminate', true);

                                setObjectsJSON();
                            });
                        });

                        $ParentsSelectionAll.off('change').on('change', function(e) {                            
                            callNested(settings, items, function(item, parent) {
                                item.isSelected = e.target.checked;

                                $root.find('#' + item._domId).prop('checked', item.isSelected);
                            });

                            setObjectsJSON();
                        });

                        showGlobalSpinner(false);

                        callback($root);
                    }
                });

                showGlobalSpinner(false);
            };
            
            window.renderUsersCombobox = function(userOptions) {
                if(userOptions.length == 0) return;

                showGlobalSpinner(true);

                var getUsersSelection = function() {
                    var selection = null;

                    try {
                        selection = $.parseJSON($usersSelection.val());
                    } catch(e) {}

                    return selection;
                };

                $usersSelection.sldsPillsCombobox({
                    comboboxSelector: '#combobox-users',
                    listboxItemsSelector: '#listbox-users',
                    selectedItemsPillsSelector: '#selectedUsersPills',
                    pillRemoveIcon: "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#close')}",
                    options: userOptions,
                    selection: getUsersSelection()
                }, function(setSelection, clearSelection) {
                    window.renderUsersSelection = function() {
                        var selection = getUsersSelection();

                        clearSelection();

                        if(selection != null) {
                            setSelection(selection);
                        }
                    };
                }).on('change', function(e, selectedIds) {
                    console.log(selectedIds);
                });

                showGlobalSpinner(false);
            };

            var splitList = function(data, chunkSize) {
                var chunks = [];

                for (var i = 0; i < data.length;) {
                    chunks.push(data.slice(i, i += chunkSize));
                }

                return chunks;
            };

            window.addChildsToRelStructureChunkSize = 10;
            window.addChildsToRelStructureMaxConnections = 6;
            
            if(document.webkitVisibilityState !== undefined) {
                window.addChildsToRelStructureMaxConnections = 3;
            }

            window.addChildsToRelStructureRemoteAction = '{!$RemoteAction.GRAXBackupCtrl.addChildsToRelStructure}';
            window.addChildsToRelStructure = function(relStruc) {
                if(Object.keys(relStruc).length == 0) {
                    showGlobalSpinner(false);

                    return;
                }

                var relStrucList = relStruc.childObjRelStructure;

                if(relStrucList.length == 0) {
                    window.ObjectHierarchy(relStruc);

                    return;
                }
                
                var relStrucListWithChilds = [];
                var childsVisitedUniqueKey = [];

                var promises = [];
                
                $.each(splitList(relStrucList, window.addChildsToRelStructureChunkSize), function(i, relStrucChunk) {
                    var promise = function() {
                        showGlobalSpinner(true);

                        var dfd = $.Deferred();

                        callAsync(function() {
                            Visualforce.remoting.Manager.invokeAction(
                                window.addChildsToRelStructureRemoteAction,
                                relStrucChunk, childsVisitedUniqueKey, function(result, event) {
                                    if (event.status) {
                                        relStrucListWithChilds.push.apply(relStrucListWithChilds, result);

                                        dfd.resolve(result);
                                    } else if (event.type === 'exception') {
                                        dfd.reject(event.message + '\n' + event.where);
                                    } else {
                                        dfd.reject(event.message);
                                    }

                                    showGlobalSpinner(false);
                                },
                                {
                                    escape: true,
                                    buffer: false
                                }
                            );

                            $.each(relStrucChunk, function(i, relStruc) {
                                childsVisitedUniqueKey.push(relStruc.uniqueKey);
                            });
                        }, 500);

                        return dfd.promise();
                    };

                    promises.push(promise);
                });

                var progress = 10;
                var resolvePromisesChunks = function(promisesChunks, i) {
                    if(i == 0) {
                        $relStructureLoadProgressPercentage.text(progress);
                        $relStructureLoadProgress.removeClass('slds-hide');
                    }

                    if(i == promisesChunks.length) {
                        $relStructureLoadProgressPercentage.text(100);

                        relStrucListWithChilds.sort(function (a, b) {
                            var condition = a.label.toLowerCase().localeCompare(b.label.toLowerCase());

                            if(condition === 0) {
                                return a.label.localeCompare(b);
                            }

                            return condition;
                        });

                        relStruc.childObjRelStructure = relStrucListWithChilds;
                        
                        $relStructureLoadProgress.addClass('slds-hide');

                        window.ObjectHierarchy(relStruc);
                    } else {
                        var promisesRunning = [];

                        $.each(promisesChunks[i], function(i, promise) {
                            promisesRunning.push(promise().done(function(result) {
                                progress += parseInt((90 / relStrucList.length) * result.length);

                                $relStructureLoadProgressPercentage.text(progress);
                            }));
                        });

                        $.when.apply($, promisesRunning).done(function(result) {
                            resolvePromisesChunks(promisesChunks, i + 1);
                        }).fail(function(error) {
                            console.error(error);

                            showGlobalSpinner(false);
                            showScheduledProcessModal(false);

                            $relStructureLoadProgress.addClass('slds-hide');
                            $relStructureLoadProgressPercentage.text(0);
                        });
                    }
                };

                resolvePromisesChunks(splitList(promises, window.addChildsToRelStructureMaxConnections), 0);
            }

            window.ObjectHierarchy = function(objRoot) {
                if(Object.keys(objRoot).length == 0) {
                    showGlobalSpinner(false);

                    return;
                }

                if(objRoot.uniqueKey == 'ContentVersion') {
                    $objectJSON.val(_contentVersionHierarchyJSON);

                    showGlobalSpinner(false);

                    return;
                }

                var selection = null;

                try {
                    selection = $.parseJSON($objectJSON.val());
                } catch(e) {}


                if(selection != null) {
                    mergeObjectsSelection(objRoot, selection);
                }

                var itemIndex = 0;

                var renderedItems = 0;

                $ObjectHierarchy.sldsTree({
                    data: [objRoot],
                    items: {
                        id: 'uniqueKey',
                        childs: 'childObjRelStructure'
                    },
                    attrs: {
                        root: {'class': ''}
                    },
                    expandIcon: {
                        path: "{!URLFOR($Asset.SLDS, 'assets/icons/utility-sprite/svg/symbols.svg#chevronright')}"
                    },
                    onStart: function($root, items, settings, callback) {
                        window.relStructureLoadProgressCancel = false;
                        showGlobalSpinner(true);

                        var totalItems = 1;
                        
                        var getTotalNestedChilds = function(item) {
                            var totalItems = 0;

                            var childs = item[settings.items.childs];

                            if(childs) {
                                totalItems += childs.length;

                                $.each(childs, function(i, item) {
                                    totalItems += getTotalNestedChilds(item);
                                });
                            }

                            return totalItems;
                        };

                        $.each(items, function(i, item) {
                            totalItems += getTotalNestedChilds(item);
                        });
                        
                        $relStructureRenderProgressItemsTotal.text(totalItems);

                        $relStructureRenderProgressItems.text(renderedItems);
                        $relStructureRenderProgress.removeClass('slds-hide');

                        callback($root);
                    },
                    onDiv: function($div, item, settings, callback) {
                        item._domId = item[settings.items.id] + '_i' + itemIndex;

                        $div.append('<div class="slds-size_1-of-1">\
                        <div class="slds-form-element">\
                            <div class="slds-form-element__control">\
                                <span class="slds-checkbox">\
                                <input name="' + item._domId + '" id="' + item._domId + '" type="checkbox" ' + (item.isSelected ? 'checked' : '') + ' />\
                                <label class="slds-checkbox__label" for="' + item._domId + '">\
                                    <span class="slds-checkbox_faux"></span>\
                                    <span class="slds-form-element__label">'
                                    + item[settings.items.label]
                                    + (!!item.relationshipName ? ' (' + item.relationshipName + ')' : '')
                                    + '</span>\
                                </label>\
                                </span>\
                            </div>\
                            </div>\
                        </div>');

                        itemIndex++;

                        callback($div);
                    },
                    onUl: function($ul, items, settings, callback) {
                        // setCascadeDeleteParents(settings, items);

                        callback($ul);
                    },
                    onLi: function($li, item, settings, callback) {
                        renderedItems++;

                        $relStructureRenderProgressItems.text(renderedItems);
                        
                        if( window.relStructureLoadProgressCancel == true ){
                            $relStructureRenderProgress.addClass('slds-hide');
                            showGlobalSpinner(false);
                        }else{
                            callback($li);
                        }
                    },
                    onFinish: function($root, items, settings, callback) {
                        var setObjectHierarchyJSON = function() {
                            var selectedItems = getSelectedItems(settings, items);

                            return $objectJSON.val(JSON.stringify(selectedItems.length > 0 ? selectedItems[0] : {}));
                        };

                        var toggleCascadeDelete = function() {
                            var isArchive = $archive.prop('checked') && !$overrideArchive.prop('checked');

                            callNested(settings, items, function(item, parent) {
                                var isCascadeDeleteSelected = (item.isRoot || parent.isCascadeDelete) && item.isCascadeDelete;

                                if(!isArchive || isCascadeDeleteSelected) {
                                    item.isSelected = isCascadeDeleteSelected;

                                    $root.find('#' + item._domId)
                                        .prop({'checked': item.isSelected, 'disabled': isArchive});

                                    if(parent && !parent.isSelected && parent.isCascadeDelete) {
                                        parent.isSelected = true;

                                        $root.find('#' + parent._domId)
                                            .prop('checked', parent.isSelected);
                                    }
                                }
                            });

                            setObjectHierarchyJSON();
                        };

                        $archive.off('click').on('click', toggleCascadeDelete);
                        $overrideArchive.off('toggleCascadeDelete').on('toggleCascadeDelete', toggleCascadeDelete);

                        callNested(settings, items, function(item, parent) {
                            var isArchive = $archive.prop('checked') && !$overrideArchive.prop('checked');

                            if((!parent || (parent.isCascadeDelete && parent.isSelected)) && item.isCascadeDelete && (isArchive || selection == null)) {
                                item.isSelected = true;

                                $root.find('#' + item._domId)
                                    .prop({'checked': true, 'disabled': isArchive});
                            }

                            if(item.isSelected && !item.isCascadeDelete) {
                                $root.find('#' + item._domId)
                                    .prop({'checked': true});
                            }

                            if(!parent && item[settings.items.childs] && item[settings.items.childs].length > 1) { // ROOT                                
                                item.isRoot = true;
                                item.isSelected = true;

                                var hasChildSelected = function(isArchive) {
                                    return hasItem(item[settings.items.childs], function(item, i) {
                                        return item.isSelected;// || (item.isCascadeDelete && isArchive);
                                    });
                                };
                                
                                $root.find('#' + item._domId)
                                    .prop({'checked': item.isSelected, 'disabled': isArchive})
                                    .closest('[role="treeitem"]').attr({'aria-expanded': 'true'});

                                var isChildSelected;
                                $root.off('change', '#' + item._domId).on('change', '#' + item._domId, function(e, newState) {
                                    isArchive = $archive.prop('checked') && !$overrideArchive.prop('checked');

                                    if(newState === undefined) {

                                        isChildSelected = hasChildSelected(isArchive);

                                        callNested(settings, item[settings.items.childs], function(item) {
                                            item.isSelected = !isChildSelected;

                                            $root.find('#' + item._domId)
                                                .prop({'checked': item.isSelected});
                                        });

                                        e.target.checked = true;

                                        setObjectHierarchyJSON();
                                    }

                                    e.stopPropagation();
                                });
                            } else if(parent && item[settings.items.childs] && item[settings.items.childs].length > 1) { // PARENT
                                var isSelectedAll = false;

                                var hasCascadeDelete = function(isArchive) {
                                    return hasItem(item[settings.items.childs], function(item, i) {
                                        return item.isCascadeDelete && isArchive;
                                    });
                                };

                                var hasChildSelected = function(isArchive) {
                                    return hasItem(item[settings.items.childs], function(item, i) {
                                        return item.isSelected && !(item.isCascadeDelete && isArchive);
                                    });
                                };

                                var isChildSelected;

                                $root.off('change', '#' + item._domId).on('change', '#' + item._domId, function(e, newState) {
                                    if(item._domId == 'Account_Cases_i114') return;

                                    var isOverrideArchive = $overrideArchive.prop('checked');
                                    var isArchive = $archive.prop('checked') && !isOverrideArchive;

                                    if(item.isCascadeDelete && isArchive && newState !== undefined) return;

                                    var oldState = item.isSelected;
                                    
                                    if(newState !== undefined) {
                                        if(oldState == newState) return;

                                        item.isSelected = newState || hasChildSelected(isArchive) || item.isSelected;

                                        $root
                                            .find('#' + item._domId)
                                                .prop('checked', item.isSelected);

                                        item.isSelected = item.isSelected;// || hasCascadeDelete(isArchive);

                                        e.target.checked = item.isSelected;

                                        if(isOverrideArchive) {
                                            setObjectHierarchyJSON();

                                            return;
                                        }
                                    } else if(e.target.checked != oldState) {
                                        /*if(!isArchive) {
                                            isChildSelected = e.target.checked;
                                            item.isSelected = isChildSelected;
                                        } else {
                                            isChildSelected = !hasChildSelected(isArchive);
                                            item.isSelected = isChildSelected;// || hasCascadeDelete(isArchive);
                                        }*/

                                        isChildSelected = e.target.checked || hasChildSelected(isArchive);
                                        item.isSelected = isChildSelected;
                                        
                                        callNested(settings, item[settings.items.childs], function(item) {
                                            // if(item.isCascadeDelete && isArchive) return;
                                            if(item.isSelected == isChildSelected) return;

                                            item.isSelected = isChildSelected;

                                            $root.find('#' + item._domId)
                                                .prop('checked', item.isSelected);
                                        });

                                        e.target.checked = item.isSelected;
                                    }

                                    var _parent = item;
                                    callNested(settings, item[settings.items.childs], function(item) {
                                        var $child = $root.find('#' + item._domId);

                                        var isDisabled = _parent.isSelected && item.isCascadeDelete && isArchive;
                                                         
                                        $child.prop('disabled', isDisabled);

                                        if(newState !== undefined || isDisabled) {
                                            item.isSelected = isDisabled || item.isSelected;
                                        } else {
                                            item.isSelected = !oldState;
                                        }

                                        $child.prop('checked', item.isSelected);
                                    });

                                    setObjectHierarchyJSON();

                                    if(oldState != item.isSelected) {
                                        setTimeout(function() {
                                            $root
                                                .find('#' + parent._domId)
                                                    .trigger('change', [item.isSelected]);
                                            
                                            setObjectHierarchyJSON();
                                        }, 100);
                                    }

                                    e.stopPropagation();
                                });
                            } else  { // CHILD
                                if(!parent) return;

                                if(item.isSelected && !parent.isSelected && !parent.isRoot) {
                                    parent.isSelected = true;
                                    $root.find('#' + parent._domId).prop('checked', parent.isSelected);
                                }
                                
                                $root.off('change', '#' + item._domId).on('change', '#' + item._domId, function(e) {
                                    item.isSelected = e.target.checked;

                                    $root
                                        .find('#' + parent._domId)
                                            .trigger('change', [item.isSelected]);

                                    setObjectHierarchyJSON();

                                    e.stopPropagation();
                                });
                            }
                        });

                        setObjectHierarchyJSON();

                        $relStructureRenderProgress.addClass('slds-hide');
                        showGlobalSpinner(false);

                        callback($root);

                        showGlobalSpinner(false);
                    }
                });

                showGlobalSpinner(false);
            };

            // Date range picklist
            window.changecolDt = function(val) {
                var currentDate = new Date();
                var dp = $('#targetDate_date');
                var dpEnd = $('#targetEndDate_date');

                if (val == 'cury') {
                    dp.datepicker('setDate', '1' + '/' + '1' + '/' + currentDate.getFullYear()).trigger('change');
                    dpEnd.datepicker('setDate', '12' + '/' + '31' + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'prevy') {
                    dp.datepicker('setDate', '1' + '/' + '1' + '/' + (currentDate.getFullYear() - 1)).trigger('change');
                    dpEnd.datepicker('setDate', '12' + '/' + '31' + '/' + (currentDate.getFullYear() - 1)).trigger('change');
                }
                if (val == 'prev2y') {
                    dp.datepicker('setDate', '1' + '/' + '1' + '/' + (currentDate.getFullYear() - 2)).trigger('change');
                    dpEnd.datepicker('setDate', '12' + '/' + '31' + '/' + (currentDate.getFullYear() - 2)).trigger('change');
                }
                if (val == 'ago2y') {
                    dp.datepicker('setDate', '1' + '/' + '1' + '/' + (currentDate.getFullYear() - 2)).trigger('change');
                    dpEnd.datepicker('setDate', '12' + '/' + '31' + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'prevcury') {
                    dpEnd.datepicker('setDate', '1' + '/' + '1' + '/' + currentDate.getFullYear()).trigger('change');
                    dp.datepicker('setDate', '12' + '/' + '31' + '/' + (currentDate.getFullYear() - 1)).trigger('change');
                }
                if (val == 'prevcur2y') {
                    dp.datepicker('setDate', '1' + '/' + '1' + '/' + (currentDate.getFullYear() - 2)).trigger('change');
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'currentq') {
                    var quarterMonth = (Math.floor((currentDate.getMonth())/3)*3);
                    currentDate = new Date(currentDate.getFullYear(), quarterMonth, 1);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                    currentDate.setMonth(currentDate.getMonth() + 3);
                    //currentDate.setDate(currentDate.getDate() - 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'curprevq') {
                    var quarterMonth = (Math.floor((currentDate.getMonth())/3)*3);
                    currentDate.setDate(currentDate.getDate() + 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');

                    currentDate = new Date(currentDate.getFullYear(), quarterMonth, 1);
                    currentDate.setMonth(currentDate.getMonth() - 3);
                    currentDate.setDate(currentDate.getDate() - 1);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'prevq') {
                    var quarterMonth = (Math.floor((currentDate.getMonth())/3)*3);
                    currentDate.setDate(currentDate.getDate() + 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');

                    currentDate.setDate(currentDate.getDate() - 1);
                    currentDate = new Date(currentDate.getFullYear(), quarterMonth, 1);

                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');

                    currentDate.setMonth(currentDate.getMonth() - 3);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'lastmonth') {
                    var m = moment();

                    m = m.startOf('month');
                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(1, 'day').startOf('month');
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'thismonth') {
                    var m = moment();

                    m = m.startOf('month');
                    dp.datepicker('setDate', m).trigger('change');

                    m = m.add(1, 'month');
                    dpEnd.datepicker('setDate', m).trigger('change');
                }
                if (val == 'lastthismonth') {
                    currentDate.setDate(currentDate.getDate() + 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                    currentDate.setDate(currentDate.getDate() - 1);
                    currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'lastweek') {
                    var m = moment();

                    m = m.startOf('isoWeek');
                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(1, 'day').startOf('isoWeek');
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'thisweek') {
                    var m = moment();

                    m = m.startOf('isoWeek');
                    dp.datepicker('setDate', m).trigger('change');

                    m = m.endOf('isoWeek').add(1, 'day');
                    dpEnd.datepicker('setDate', m).trigger('change');
                }
                if (val == 'yesterday') {
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                    currentDate.setDate(currentDate.getDate() - 1);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'today') {
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                    currentDate.setDate(currentDate.getDate() + 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'tomorrow') {
                    currentDate.setDate(currentDate.getDate() + 1);
                    dp.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                    currentDate.setDate(currentDate.getDate() + 1);
                    dpEnd.datepicker('setDate', (currentDate.getMonth() + 1) + '/' + currentDate.getDate() + '/' + currentDate.getFullYear()).trigger('change');
                }
                if (val == 'last7') {
                    var m = moment();

                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(6, 'days')
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'last30') {
                    var m = moment();

                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(29, 'days')
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'last60') {
                    var m = moment();

                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(59, 'days')
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'last90') {
                    var m = moment();

                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(89, 'days')
                    dp.datepicker('setDate', m).trigger('change');
                }
                if (val == 'last120') {
                    var m = moment();

                    dpEnd.datepicker('setDate', m).trigger('change');
                    
                    m = m.subtract(119, 'days')
                    dp.datepicker('setDate', m).trigger('change');
                }
                return true;
            };

            window.addReportListOptions = function(options) {
                $reportList.find('option:gt(0)').remove();

                $.each(options, function(i, item) {
                    var $option = $('<option>')
                                    .attr('value', item.id)
                                    .text(item.name);
                    $reportList.append($option).prop('disabled', false);
                });
                showGlobalSpinner(false);
            };

            $reportList.on('change', function(e) {
                $targetReport.val(e.target.value);
            });

            window.editScheduledProcess = function(spId, isScheduledProcessMultiple) {
                $objectJSON.val(null);

                selectScheduledProcess(spId);
                _isScheduledProcessMultiple = isScheduledProcessMultiple;
            };

            window.showScheduledProcessModal = function(state) {
                if(pageAlertMessage && state) return;

                $scheduledProcessType.val(_isScheduledProcessMultiple ? 'Multi-Object' : 'Hierarchy');
                $scheduledProcessModal.attr('data-multi', _isScheduledProcessMultiple);

                $scheduledProcessModal.trigger('modaltoggle', [state]);
            };

            $scheduledProcessModal.on('modaltoggle', function(e, state) {
                if(!state) {
                    fillForm = cleanForm;
                    _reportListRendered = false;
                } else {
                    fillForm();
                    updateSaveState();
                }
            });

            $('#archive_help_button').on('mouseover mouseleave', function(e) {
                $('#archive_help').toggleClass('slds-hide', e.type == 'mouseleave');
            }).on('click', function(e) {
                e.preventDefault();
            });

            $('#incrementalBackup_help_button').on('mouseover mouseleave', function(e) {
                $('#incrementalBackup_help').toggleClass('slds-hide', e.type == 'mouseleave');
            }).on('click', function(e) {
                e.preventDefault();
            });

            $('#rollingDate_help_button').on('mouseover mouseleave', function(e) {
                $('#rollingDate_help').toggleClass('slds-hide', e.type == 'mouseleave');
            }).on('click', function(e) {
                e.preventDefault();
            });

            window.cleanForm = cleanForm;


            window.addBackupObjectListOptions = function(options) {
                $objectList.find('option:first').attr('value', '');

                $.each(options, function(i, item) {
                    var $option = $('<option>')
                                    .attr('value', item.id)
                                    .text(item.name);
                    $objectList.append($option).prop('disabled', false);
                });

                $objectList.prop('disabled', false).val(null);
            };

            addBackupObjectListOptions({!backupItemsJSON});

            $('a[data-id]').on('click', function(e) {
                if(typeof sforce !== "undefined" && sforce !== null) {
                    e.preventDefault();
                    
                    var id = $(this).attr('data-id');

                    sforce.one.navigateToSObject(id, 'detail');
                }
            });
        });
    </script>
</apex:page>